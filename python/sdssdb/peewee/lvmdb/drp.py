#!/usr/bin/env python
# -*- coding: utf-8 -*-
#

# Code generated by:
# python -m pwiz -e postgresql lvmdb -s drp -i -o
# Date: February 14, 2023 04:37PM
# Database: lvmdb
# Peewee version: 3.15.4

from peewee import Field
from peewee import (AutoField, FloatField, ForeignKeyField,
                    IntegerField, TextField, DoubleField)
from peewee import fn, SQL
from playhouse.hybrid import hybrid_method
from playhouse.postgres_ext import ArrayField

from .. import BaseModel
from . import database  # noqa


class PolygonField(Field):
    field_type = 'polygon'

    def db_value(self, value):
        """ Convert the python list if tuples into a polygon string

        Convert the python list of coordinates into a string to be
        entered into the database.  The value should be of the form,
        e.g. [ (x1,y1), (x2,y2), (x3,y3), ... ]
        """
        if not value:
            return
        return "({0})".format(",".join([str(x) for x in value]))

    def python_value(self, value):
        """ Convert the db result back to a python object

        Convert the db polygon value back into a Python list of
        point tuples. Incoming format looks like: '((12,34),(56,78),(90,12))'
        """
        if not value:
            return

        polygon = []
        for point in value[1:-1].split("),("): # also strip outer single quotes
            point = point.lstrip("(") # remove extra "(" ")" (first and last elements only)
            point = point.rstrip(")")
            x, y = point.split(",")
            polygon.append((float(x), float(y)))
        value = polygon
        return value


class PolySearch:
    """ Class for enabling searches using polygons """

    @hybrid_method
    def poly_search(self, poly):
        """ Returns a query with the rows that fall within a polygon region on the sky. """

        assert hasattr(self, self.ra_col) and hasattr(self, self.dec_col), \
            'this model class does not have ra/dec columns.'

        poly_cast = f"'{tuple(poly)}'::polygon"
        return SQL(f"q3c_poly_query(ifura, ifudec, {poly_cast})")

    @poly_search.expression
    def poly_search(cls, poly):

        assert hasattr(cls, cls.ra_col) and hasattr(cls, cls.dec_col), \
            'this model class does not have ra/dec columns.'

        poly_cast = f"'{tuple(poly)}'::polygon"
        return SQL(f"q3c_poly_query(ifura, ifudec, {poly_cast})")


class DRPBase(BaseModel):

    class Meta:
        schema = "drp"
        database = database


class Ifu(DRPBase):
    pk = AutoField()
    fiberid = IntegerField(null=True)
    ringid = IntegerField(null=True)
    ringfibnum = IntegerField(null=True)
    specfibid = IntegerField(null=True)
    specid = IntegerField(null=True)
    label = TextField(null=True)
    standard = TextField(null=True)
    skya = TextField(null=True)
    skyb = TextField(null=True)
    xpmm = FloatField(null=True)
    ypmm = FloatField(null=True)
    raoff = DoubleField(null=True)
    decoff = DoubleField(null=True)

    class Meta:
        table_name = 'ifu'


class Fibers(DRPBase):
    pk = AutoField()
    fiberid = IntegerField(null=True)
    specid = IntegerField(null=True)
    blockid = TextField(null=True)
    finblock = IntegerField(null=True)
    targettype = TextField(null=True)
    ifulabel = TextField(null=True)
    finifu = IntegerField(null=True)
    xpmm = FloatField(null=True)
    ypmm = FloatField(null=True)
    ringnum = IntegerField(null=True)
    status = IntegerField(null=True)
    ifu_pk = ForeignKeyField(column_name='ifu_pk', field='pk', model=Ifu, null=True)

    class Meta:
        table_name = 'fibers'


class Pipeline(DRPBase):
    pk = AutoField()
    version = TextField(null=True)
    label = TextField(null=True)
    release = TextField(null=True)

    class Meta:
        table_name = 'pipeline'


class Rss(PolySearch, DRPBase):
    pk = AutoField()
    tileid = IntegerField(null=True)
    ifura = DoubleField(null=True)
    ifudec = DoubleField(null=True)
    pipeline_pk = ForeignKeyField(column_name='pipeline_pk', field='pk', model=Pipeline, null=True)
    footprint = PolygonField(null=True)
    ra_col = 'ifura'
    dec_col = 'ifudec'

    class Meta:
        table_name = 'rss'

    @hybrid_method
    def in_poly(self, ra, dec):
        """Returns a query with the rows where the input points falls within a tile footprint """

        assert hasattr(self, self.ra_col) and hasattr(self, self.dec_col), \
            'this model class does not have ra/dec columns.'

        return fn.q3c_in_poly(ra, dec, self.footprint)

    @in_poly.expression
    def in_poly(cls, ra, dec):

        assert hasattr(cls, cls.ra_col) and hasattr(cls, cls.dec_col), \
            'this model class does not have ra/dec columns.'

        return fn.q3c_in_poly(ra, dec, cls.footprint)

    @hybrid_method
    def poly_intersect(self, poly):
        """Returns a query with the rows that intersect with the input sky polygon region """

        assert hasattr(self, self.ra_col) and hasattr(self, self.dec_col), \
            'this model class does not have ra/dec columns.'
        poly_cast = f"'{tuple(poly)}'::polygon"
        return SQL(f"polygon {poly_cast} && footprint")

    @poly_intersect.expression
    def poly_intersect(cls, poly):

        assert hasattr(cls, cls.ra_col) and hasattr(cls, cls.dec_col), \
            'this model class does not have ra/dec columns.'
        poly_cast = f"'{tuple(poly)}'::polygon"
        return SQL(f"polygon {poly_cast} && footprint")


class Header(DRPBase):
    pk = AutoField()
    index = IntegerField(null=True)
    key = TextField(null=True)
    value = TextField(null=True)
    comment = TextField(null=True)
    rss_pk = ForeignKeyField(column_name='rss_pk', field='pk', model=Rss, null=True)

    class Meta:
        table_name = 'header'


class Obsinfo(DRPBase):
    pk = AutoField()
    rss_pk = ForeignKeyField(column_name='rss_pk', field='pk', model=Rss, null=True)
    mjd = IntegerField(null=True)
    expnum = IntegerField(null=True)
    exptime = FloatField(null=True)
    nexp = IntegerField(null=True)
    dpos = IntegerField(null=True)
    dra = DoubleField(null=True)
    ddec = DoubleField(null=True)
    airmass = FloatField(null=True)
    seeing = FloatField(null=True)
    bluesn2 = FloatField(null=True)
    redsn2 = FloatField(null=True)
    nirsn2 = FloatField(null=True)
    drp2qual = IntegerField(null=True)

    class Meta:
        table_name = 'obsinfo'


class Wavelength(DRPBase):
    pk = AutoField()
    index = IntegerField(null=True)
    value = FloatField(null=True)

    class Meta:
        table_name = 'wavelength'


class Rssfiber(PolySearch, DRPBase):
    pk = AutoField()
    rss_pk = ForeignKeyField(column_name='rss_pk', field='pk', model=Rss, null=True)
    fibers_pk = ForeignKeyField(column_name='fibers_pk', field='pk', model=Fibers, null=True)
    obsinfo_pk = ForeignKeyField(column_name='obsinfo_pk', field='pk', model=Obsinfo, null=True)
    yidx = IntegerField(null=True)
    xpos = FloatField(null=True)
    ypos = FloatField(null=True)
    wave_pk = ForeignKeyField(column_name='wave_pk', field='pk', model=Wavelength, null=True)
    ra = DoubleField(null=True)
    dec = DoubleField(null=True)
    ra_col = 'ra'
    dec_col = 'dec'

    class Meta:
        table_name = 'rssfiber'


