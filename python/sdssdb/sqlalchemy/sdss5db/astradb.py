# coding: utf-8

# this file was autogenerated with sqlacodegen and then adapted for sdssdb
# flake8: noqa=E501,E741

from sqlalchemy.ext.declarative import AbstractConcreteBase, declared_attr
from sqlalchemy import ARRAY, BigInteger, Boolean, Column, DateTime, Float, ForeignKey, Index, Integer, LargeBinary, Text, text
from sqlalchemy.orm import relationship

from sdssdb.sqlalchemy.sdss5db import SDSS5dbBase, database


SCHEMA = 'astra_050'


class Base(AbstractConcreteBase, SDSS5dbBase):
    __abstract__ = True
    _schema = SCHEMA
    _relations = 'define_relations'

    @declared_attr
    def __table_args__(cls):
        return {'schema': cls._schema}


class Source(Base):
    __tablename__ = 'source'

    pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.source_pk_seq'::regclass)"))
    sdss_id = Column(BigInteger, unique=True)
    sdss4_apogee_id = Column(Text, unique=True)
    gaia_dr2_source_id = Column(BigInteger)
    gaia_dr3_source_id = Column(BigInteger)
    tic_v8_id = Column(BigInteger)
    healpix = Column(Integer)
    carton_0 = Column(Text, nullable=False)
    lead = Column(Text)
    version_id = Column(Integer)
    catalogid = Column(BigInteger)
    catalogid21 = Column(BigInteger)
    catalogid25 = Column(BigInteger)
    catalogid31 = Column(BigInteger)
    n_associated = Column(Integer)
    n_neighborhood = Column(Integer, nullable=False)
    sdss5_target_flags = Column(LargeBinary)
    sdss4_apogee_target1_flags = Column(BigInteger, nullable=False)
    sdss4_apogee_target2_flags = Column(BigInteger, nullable=False)
    sdss4_apogee2_target1_flags = Column(BigInteger, nullable=False)
    sdss4_apogee2_target2_flags = Column(BigInteger, nullable=False)
    sdss4_apogee2_target3_flags = Column(BigInteger, nullable=False)
    sdss4_apogee_member_flags = Column(BigInteger, nullable=False)
    sdss4_apogee_extra_target_flags = Column(BigInteger, nullable=False)
    ra = Column(Float)
    dec = Column(Float)
    plx = Column(Float)
    e_plx = Column(Float)
    pmra = Column(Float)
    e_pmra = Column(Float)
    pmde = Column(Float)
    e_pmde = Column(Float)
    gaia_v_rad = Column(Float)
    gaia_e_v_rad = Column(Float)
    g_mag = Column(Float)
    bp_mag = Column(Float)
    rp_mag = Column(Float)
    j_mag = Column(Float)
    e_j_mag = Column(Float)
    h_mag = Column(Float)
    e_h_mag = Column(Float)
    k_mag = Column(Float)
    e_k_mag = Column(Float)
    ph_qual = Column(Text)
    bl_flg = Column(Text)
    cc_flg = Column(Text)
    w1_flux = Column(Float)
    w1_dflux = Column(Float)
    w2_flux = Column(Float)
    w2_dflux = Column(Float)
    w1_frac = Column(Float)
    w2_frac = Column(Float)
    w1uflags = Column(BigInteger)
    w2uflags = Column(BigInteger)
    w1aflags = Column(BigInteger)
    w2aflags = Column(BigInteger)
    mag4_5 = Column(Float)
    d4_5m = Column(Float)
    rms_f4_5 = Column(Float)
    sqf_4_5 = Column(BigInteger, nullable=False)
    mf4_5 = Column(BigInteger, nullable=False)
    csf = Column(BigInteger, nullable=False)
    zgr_teff = Column(Float)
    zgr_e_teff = Column(Float)
    zgr_logg = Column(Float)
    zgr_e_logg = Column(Float)
    zgr_fe_h = Column(Float)
    zgr_e_fe_h = Column(Float)
    zgr_e = Column(Float)
    zgr_e_e = Column(Float)
    zgr_plx = Column(Float)
    zgr_e_plx = Column(Float)
    zgr_teff_confidence = Column(Float)
    zgr_logg_confidence = Column(Float)
    zgr_fe_h_confidence = Column(Float)
    zgr_ln_prior = Column(Float)
    zgr_chi2 = Column(Float)
    zgr_quality_flags = Column(BigInteger, nullable=False)
    r_med_geo = Column(Float)
    r_lo_geo = Column(Float)
    r_hi_geo = Column(Float)
    r_med_photogeo = Column(Float)
    r_lo_photogeo = Column(Float)
    r_hi_photogeo = Column(Float)
    bailer_jones_flags = Column(Text)
    ebv = Column(Float)
    e_ebv = Column(Float)
    ebv_flags = Column(BigInteger, nullable=False)
    ebv_zhang_2023 = Column(Float)
    e_ebv_zhang_2023 = Column(Float)
    ebv_sfd = Column(Float)
    e_ebv_sfd = Column(Float)
    ebv_rjce_glimpse = Column(Float)
    e_ebv_rjce_glimpse = Column(Float)
    ebv_rjce_allwise = Column(Float)
    e_ebv_rjce_allwise = Column(Float)
    ebv_bayestar_2019 = Column(Float)
    e_ebv_bayestar_2019 = Column(Float)
    ebv_edenhofer_2023 = Column(Float)
    e_ebv_edenhofer_2023 = Column(Float)
    n_boss_visits = Column(Integer)
    n_apogee_visits = Column(Integer)
    boss_min_mjd = Column(Integer)
    boss_max_mjd = Column(Integer)
    apogee_min_mjd = Column(Integer)
    apogee_max_mjd = Column(Integer)
    c_star = Column(Float(53))
    u_jkc_mag = Column(Float(53))
    u_jkc_mag_flag = Column(Integer)
    b_jkc_mag = Column(Float(53))
    b_jkc_mag_flag = Column(Integer)
    v_jkc_mag = Column(Float(53))
    v_jkc_mag_flag = Column(Integer)
    r_jkc_mag = Column(Float(53))
    r_jkc_mag_flag = Column(Integer)
    i_jkc_mag = Column(Float(53))
    i_jkc_mag_flag = Column(Integer)
    u_sdss_mag = Column(Float(53))
    u_sdss_mag_flag = Column(Integer)
    r_sdss_mag = Column(Float(53))
    r_sdss_mag_flag = Column(Integer)
    i_sdss_mag = Column(Float(53))
    i_sdss_mag_flag = Column(Integer)
    z_sdss_mag = Column(Float(53))
    z_sdss_mag_flag = Column(Integer)
    y_ps1_mag = Column(Float(53))
    y_ps1_mag_flag = Column(Integer)
    g_sdss_mag = Column(Float(53))
    g_sdss_mag_flag = Column(Integer)
    l = Column(Float(53))
    b = Column(Float(53))
    w1_mag = Column(Float(53))
    w2_mag = Column(Float(53))
    e_w2_mag = Column(Float(53))
    e_w1_mag = Column(Float(53))


class Spectrum(Base):
    __tablename__ = 'spectrum'

    pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.spectrum_pk_seq'::regclass)"))
    spectrum_type_flags = Column(BigInteger, nullable=False)


class ApogeeCoaddedSpectrumInApStar(Base):
    __tablename__ = 'apogee_coadded_spectrum_in_ap_star'
    __table_args__ = (
        Index('apogee_coadded_spectrum_in_ap_star_release_apred_apstar__12f0b2', 'release', 'apred', 'apstar', 'obj', 'telescope', 'healpix', 'field', 'prefix', unique=True),
    )

    pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.apogee_coadded_spectrum_in_ap_star_pk_seq'::regclass)"))
    source_pk = Column(ForeignKey('astra_050.source.pk'), index=True)
    star_pk = Column(BigInteger, unique=True)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), unique=True)
    release = Column(Text, nullable=False)
    filetype = Column(Text, nullable=False)
    apred = Column(Text, nullable=False)
    apstar = Column(Text, nullable=False)
    obj = Column(Text, nullable=False)
    telescope = Column(Text, nullable=False)
    healpix = Column(Integer)
    field = Column(Text)
    prefix = Column(Text)
    min_mjd = Column(Integer)
    max_mjd = Column(Integer)
    n_entries = Column(Integer)
    n_visits = Column(Integer)
    n_good_visits = Column(Integer)
    n_good_rvs = Column(Integer)
    snr = Column(Float)
    mean_fiber = Column(Float)
    std_fiber = Column(Float)
    spectrum_flags = Column(BigInteger, nullable=False)
    v_rad = Column(Float)
    e_v_rad = Column(Float)
    std_v_rad = Column(Float)
    median_e_v_rad = Column(Float)
    doppler_teff = Column(Float)
    doppler_e_teff = Column(Float)
    doppler_logg = Column(Float)
    doppler_e_logg = Column(Float)
    doppler_fe_h = Column(Float)
    doppler_e_fe_h = Column(Float)
    doppler_rchi2 = Column(Float)
    doppler_flags = Column(BigInteger, nullable=False)
    xcorr_v_rad = Column(Float)
    xcorr_v_rel = Column(Float)
    xcorr_e_v_rel = Column(Float)
    ccfwhm = Column(Float)
    autofwhm = Column(Float)
    n_components = Column(Integer)

    source = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class ApogeeCombinedSpectrum(Base):
    __tablename__ = 'apogee_combined_spectrum'
    __table_args__ = (
        Index('apogee_combined_spectrum_release_filetype_v_astra_healpi_17dcd9', 'release', 'filetype', 'v_astra', 'healpix', 'sdss_id', 'telescope', unique=True),
    )

    pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.apogee_combined_spectrum_pk_seq'::regclass)"))
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), unique=True)
    source_pk = Column(ForeignKey('astra_050.source.pk'), index=True)
    release = Column(Text, nullable=False, index=True)
    filetype = Column(Text, nullable=False)
    v_astra = Column(Text, nullable=False)
    healpix = Column(Integer, nullable=False)
    sdss_id = Column(BigInteger, index=True)
    apred = Column(Text, nullable=False)
    obj = Column(Text, nullable=False)
    telescope = Column(Text, nullable=False)
    min_mjd = Column(Integer)
    max_mjd = Column(Integer)
    n_entries = Column(Integer)
    n_visits = Column(Integer)
    n_good_visits = Column(Integer)
    n_good_rvs = Column(Integer)
    snr = Column(Float)
    mean_fiber = Column(Float)
    std_fiber = Column(Float)
    spectrum_flags = Column(BigInteger, nullable=False)
    v_rad = Column(Float)
    e_v_rad = Column(Float)
    std_v_rad = Column(Float)
    median_e_v_rad = Column(Float)
    doppler_teff = Column(Float)
    doppler_e_teff = Column(Float)
    doppler_logg = Column(Float)
    doppler_e_logg = Column(Float)
    doppler_fe_h = Column(Float)
    doppler_e_fe_h = Column(Float)
    doppler_rchi2 = Column(Float)
    doppler_flags = Column(BigInteger, nullable=False)
    xcorr_v_rad = Column(Float)
    xcorr_v_rel = Column(Float)
    xcorr_e_v_rel = Column(Float)
    ccfwhm = Column(Float)
    autofwhm = Column(Float)
    n_components = Column(Integer)
    input_spectrum_pks = Column(ARRAY(Integer()), index=True)
    nmf_rchi2 = Column(Float)
    nmf_flags = Column(BigInteger, nullable=False)

    source = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class ApogeeNet(Base):
    __tablename__ = 'apogee_net'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.a_net_task_pk_seq'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'), index=True)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False, index=True)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False, index=True)
    teff = Column(Float)
    e_teff = Column(Float)
    logg = Column(Float)
    e_logg = Column(Float)
    fe_h = Column(Float)
    e_fe_h = Column(Float)
    result_flags = Column(BigInteger, nullable=False)
    raw_e_teff = Column(Float(53))
    raw_e_logg = Column(Float(53))
    raw_e_fe_h = Column(Float(53))

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class ApogeeNetV2(Base):
    __tablename__ = 'apogee_net_v2'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.apogee_net_task_pk_seq'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'), index=True)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False, index=True)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False, index=True)
    teff = Column(Float)
    e_teff = Column(Float)
    logg = Column(Float)
    e_logg = Column(Float)
    fe_h = Column(Float)
    e_fe_h = Column(Float)
    teff_sample_median = Column(Float)
    logg_sample_median = Column(Float)
    fe_h_sample_median = Column(Float)
    result_flags = Column(BigInteger, nullable=False)
    raw_e_teff = Column(Float(53))
    raw_e_logg = Column(Float(53))
    raw_e_fe_h = Column(Float(53))

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class ApogeeRestFrameVisitSpectrum(Base):
    __tablename__ = 'apogee_rest_frame_visit_spectrum'
    __table_args__ = (
        Index('apogee_rest_frame_visit_spectrum_release_v_astra_sdss_id_ffd17f', 'release', 'v_astra', 'sdss_id', 'apred', 'mjd', 'plate', 'telescope', 'field', 'fiber', 'prefix', 'reduction', unique=True),
    )

    pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.apogee_rest_frame_visit_spectrum_pk_seq'::regclass)"))
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), unique=True)
    source_pk = Column(ForeignKey('astra_050.source.pk'), index=True)
    catalogid = Column(BigInteger, index=True)
    star_pk = Column(BigInteger)
    visit_pk = Column(BigInteger)
    rv_visit_pk = Column(BigInteger)
    release = Column(Text, nullable=False, index=True)
    filetype = Column(Text, nullable=False)
    v_astra = Column(Text, nullable=False)
    healpix = Column(Integer, nullable=False)
    sdss_id = Column(BigInteger, nullable=False, index=True)
    apred = Column(Text, nullable=False, index=True)
    plate = Column(Text, nullable=False, index=True)
    telescope = Column(Text, nullable=False, index=True)
    fiber = Column(Integer, nullable=False, index=True)
    mjd = Column(Integer, nullable=False, index=True)
    field = Column(Text, nullable=False, index=True)
    prefix = Column(Text, nullable=False)
    reduction = Column(Text, nullable=False)
    obj = Column(Text)
    date_obs = Column(DateTime)
    jd = Column(Float)
    exptime = Column(Float)
    dithered = Column(Boolean)
    f_night_time = Column(Float)
    input_ra = Column(Float)
    input_dec = Column(Float)
    n_frames = Column(Integer)
    assigned = Column(Integer)
    on_target = Column(Integer)
    valid = Column(Integer)
    fps = Column(Boolean)
    snr = Column(Float)
    spectrum_flags = Column(BigInteger, nullable=False)
    v_rad = Column(Float)
    v_rel = Column(Float)
    e_v_rel = Column(Float)
    bc = Column(Float)
    doppler_teff = Column(Float)
    doppler_e_teff = Column(Float)
    doppler_logg = Column(Float)
    doppler_e_logg = Column(Float)
    doppler_fe_h = Column(Float)
    doppler_e_fe_h = Column(Float)
    doppler_rchi2 = Column(Float)
    doppler_flags = Column(BigInteger, nullable=False)
    xcorr_v_rad = Column(Float)
    xcorr_v_rel = Column(Float)
    xcorr_e_v_rel = Column(Float)
    ccfwhm = Column(Float)
    autofwhm = Column(Float)
    n_components = Column(Integer)
    nmf_rchi2 = Column(Float)
    nmf_flags = Column(BigInteger, nullable=False)

    source = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class ApogeeVisitSpectrum(Base):
    __tablename__ = 'apogee_visit_spectrum'
    __table_args__ = (
        Index('apogee_visit_spectrum_release_apred_mjd_plate_telescope__65635d', 'release', 'apred', 'mjd', 'plate', 'telescope', 'field', 'fiber', 'prefix', 'reduction', unique=True),
    )

    pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.apogee_visit_spectrum_pk_seq'::regclass)"))
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), unique=True)
    source_pk = Column(ForeignKey('astra_050.source.pk'), index=True)
    catalogid = Column(BigInteger, index=True)
    star_pk = Column(BigInteger)
    visit_pk = Column(BigInteger, unique=True)
    rv_visit_pk = Column(BigInteger, unique=True)
    release = Column(Text, nullable=False, index=True)
    filetype = Column(Text, nullable=False)
    apred = Column(Text, nullable=False, index=True)
    plate = Column(Text, nullable=False, index=True)
    telescope = Column(Text, nullable=False, index=True)
    fiber = Column(Integer, nullable=False, index=True)
    mjd = Column(Integer, nullable=False, index=True)
    field = Column(Text, nullable=False, index=True)
    prefix = Column(Text, nullable=False)
    reduction = Column(Text, nullable=False)
    obj = Column(Text)
    date_obs = Column(DateTime)
    jd = Column(Float)
    exptime = Column(Float)
    dithered = Column(Boolean)
    f_night_time = Column(Float)
    input_ra = Column(Float)
    input_dec = Column(Float)
    n_frames = Column(Integer)
    assigned = Column(Integer)
    on_target = Column(Integer)
    valid = Column(Integer)
    fps = Column(Boolean)
    snr = Column(Float)
    spectrum_flags = Column(BigInteger, nullable=False)
    v_rad = Column(Float)
    v_rel = Column(Float)
    e_v_rel = Column(Float)
    bc = Column(Float)
    doppler_teff = Column(Float)
    doppler_e_teff = Column(Float)
    doppler_logg = Column(Float)
    doppler_e_logg = Column(Float)
    doppler_fe_h = Column(Float)
    doppler_e_fe_h = Column(Float)
    doppler_rchi2 = Column(Float)
    doppler_flags = Column(BigInteger, nullable=False)
    xcorr_v_rad = Column(Float)
    xcorr_v_rel = Column(Float)
    xcorr_e_v_rel = Column(Float)
    ccfwhm = Column(Float)
    autofwhm = Column(Float)
    n_components = Column(Integer)

    source = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class AstroNNdist(Base):
    __tablename__ = 'astro_n_ndist'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.astro_n_ndist_task_pk_seq'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'), index=True)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False, index=True)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False, index=True)
    k_mag = Column(Float)
    ebv = Column(Float)
    a_k_mag = Column(Float)
    L_fakemag = Column(Float)
    L_fakemag_err = Column(Float)
    dist = Column(Float)
    dist_err = Column(Float)
    result_flags = Column(BigInteger, nullable=False)

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class AstroNn(Base):
    __tablename__ = 'astro_nn'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.astro_nn_task_pk_seq'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'), index=True)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False, index=True)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False, index=True)
    teff = Column(Float)
    e_teff = Column(Float)
    logg = Column(Float)
    e_logg = Column(Float)
    c_h = Column(Float)
    e_c_h = Column(Float)
    c_1_h = Column(Float)
    e_c_1_h = Column(Float)
    n_h = Column(Float)
    e_n_h = Column(Float)
    o_h = Column(Float)
    e_o_h = Column(Float)
    na_h = Column(Float)
    e_na_h = Column(Float)
    mg_h = Column(Float)
    e_mg_h = Column(Float)
    al_h = Column(Float)
    e_al_h = Column(Float)
    si_h = Column(Float)
    e_si_h = Column(Float)
    p_h = Column(Float)
    e_p_h = Column(Float)
    s_h = Column(Float)
    e_s_h = Column(Float)
    k_h = Column(Float)
    e_k_h = Column(Float)
    ca_h = Column(Float)
    e_ca_h = Column(Float)
    ti_h = Column(Float)
    e_ti_h = Column(Float)
    ti_2_h = Column(Float)
    e_ti_2_h = Column(Float)
    v_h = Column(Float)
    e_v_h = Column(Float)
    cr_h = Column(Float)
    e_cr_h = Column(Float)
    mn_h = Column(Float)
    e_mn_h = Column(Float)
    fe_h = Column(Float)
    e_fe_h = Column(Float)
    co_h = Column(Float)
    e_co_h = Column(Float)
    ni_h = Column(Float)
    e_ni_h = Column(Float)
    result_flags = Column(BigInteger, nullable=False)

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class BossCombinedSpectrum(Base):
    __tablename__ = 'boss_combined_spectrum'
    __table_args__ = (
        Index('boss_combined_spectrum_release_filetype_v_astra_healpix__c290b2', 'release', 'filetype', 'v_astra', 'healpix', 'sdss_id', 'telescope', unique=True),
    )

    pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.boss_combined_spectrum_pk_seq'::regclass)"))
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), unique=True)
    source_pk = Column(ForeignKey('astra_050.source.pk'), index=True)
    release = Column(Text, nullable=False, index=True)
    filetype = Column(Text, nullable=False)
    v_astra = Column(Text, nullable=False)
    healpix = Column(Integer)
    sdss_id = Column(BigInteger, nullable=False, index=True)
    run2d = Column(Text, nullable=False)
    telescope = Column(Text, nullable=False, index=True)
    min_mjd = Column(Integer)
    max_mjd = Column(Integer)
    n_visits = Column(Integer)
    n_good_visits = Column(Integer)
    n_good_rvs = Column(Integer)
    v_rad = Column(Float)
    e_v_rad = Column(Float)
    std_v_rad = Column(Float)
    median_e_v_rad = Column(Float)
    xcsao_teff = Column(Float)
    xcsao_e_teff = Column(Float)
    xcsao_logg = Column(Float)
    xcsao_e_logg = Column(Float)
    xcsao_fe_h = Column(Float)
    xcsao_e_fe_h = Column(Float)
    xcsao_meanrxc = Column(Float)
    snr = Column(Float)
    gri_gaia_transform_flags = Column(BigInteger, nullable=False)
    zwarning_flags = Column(BigInteger, nullable=False)
    nmf_rchi2 = Column(Float)
    nmf_flags = Column(BigInteger, nullable=False)

    source = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class BossNet(Base):
    __tablename__ = 'boss_net'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.b_net_task_pk_seq'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'), index=True)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False, index=True)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False, index=True)
    teff = Column(Float)
    e_teff = Column(Float)
    logg = Column(Float)
    e_logg = Column(Float)
    fe_h = Column(Float)
    e_fe_h = Column(Float)
    result_flags = Column(BigInteger, nullable=False)
    v_rad = Column(Float)
    e_v_rad = Column(Float)

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class BossVisitSpectrum(Base):
    __tablename__ = 'boss_visit_spectrum'
    __table_args__ = (
        Index('boss_visit_spectrum_release_run2d_fieldid_mjd_catalogid', 'release', 'run2d', 'fieldid', 'mjd', 'catalogid', unique=True),
    )

    pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.boss_visit_spectrum_pk_seq'::regclass)"))
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), unique=True)
    source_pk = Column(ForeignKey('astra_050.source.pk'), index=True)
    release = Column(Text, nullable=False)
    filetype = Column(Text, nullable=False)
    run2d = Column(Text, nullable=False)
    mjd = Column(Integer, nullable=False)
    fieldid = Column(Integer, nullable=False)
    catalogid = Column(BigInteger, nullable=False)
    healpix = Column(Integer, nullable=False)
    n_exp = Column(Integer)
    exptime = Column(Float)
    plateid = Column(Integer)
    cartid = Column(Integer)
    mapid = Column(Integer)
    slitid = Column(Integer)
    psfsky = Column(Integer)
    preject = Column(Float)
    n_std = Column(Integer)
    n_gal = Column(Integer)
    lowrej = Column(Integer)
    highrej = Column(Integer)
    scatpoly = Column(Integer)
    proftype = Column(Integer)
    nfitpoly = Column(Integer)
    skychi2 = Column(Float)
    schi2min = Column(Float)
    schi2max = Column(Float)
    alt = Column(Float)
    az = Column(Float)
    telescope = Column(Text)
    seeing = Column(Float)
    airmass = Column(Float)
    airtemp = Column(Float)
    dewpoint = Column(Float)
    humidity = Column(Float)
    pressure = Column(Float)
    dust_a = Column(Float)
    dust_b = Column(Float)
    gust_direction = Column(Float)
    gust_speed = Column(Float)
    wind_direction = Column(Float)
    wind_speed = Column(Float)
    moon_dist_mean = Column(Float)
    moon_phase_mean = Column(Float)
    n_guide = Column(Integer)
    tai_beg = Column(BigInteger)
    tai_end = Column(BigInteger)
    fiber_offset = Column(Boolean)
    f_night_time = Column(Float)
    delta_ra = Column(ARRAY(Float()), index=True)
    delta_dec = Column(ARRAY(Float()), index=True)
    snr = Column(Float)
    gri_gaia_transform_flags = Column(BigInteger, nullable=False)
    zwarning_flags = Column(BigInteger, nullable=False)
    xcsao_v_rad = Column(Float)
    xcsao_e_v_rad = Column(Float)
    xcsao_teff = Column(Float)
    xcsao_e_teff = Column(Float)
    xcsao_logg = Column(Float)
    xcsao_e_logg = Column(Float)
    xcsao_fe_h = Column(Float)
    xcsao_e_fe_h = Column(Float)
    xcsao_rxc = Column(Float)

    source = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class Corv(Base):
    __tablename__ = 'corv'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.corv_task_pk_seq'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'), index=True)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False, index=True)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False, index=True)
    v_rad = Column(Float)
    e_v_rad = Column(Float)
    teff = Column(Float)
    e_teff = Column(Float)
    logg = Column(Float)
    e_logg = Column(Float)
    initial_teff = Column(Float)
    initial_logg = Column(Float)
    initial_v_rad = Column(Float)
    rchi2 = Column(Float)
    result_flags = Column(Integer, server_default=text("0"))

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class FerreCoarse(Base):
    __tablename__ = 'ferre_coarse'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.ferre_coarse_task_pk_seq'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'), nullable=False, index=True)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False, index=True)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False, index=True)
    pwd = Column(Text, nullable=False)
    short_grid_name = Column(Text, nullable=False)
    header_path = Column(Text, nullable=False)
    initial_teff = Column(Float)
    initial_logg = Column(Float)
    initial_m_h = Column(Float)
    initial_log10_v_sini = Column(Float)
    initial_log10_v_micro = Column(Float)
    initial_alpha_m = Column(Float)
    initial_c_m = Column(Float)
    initial_n_m = Column(Float)
    initial_flags = Column(BigInteger, nullable=False)
    continuum_order = Column(Integer)
    continuum_reject = Column(Float)
    continuum_flag = Column(Integer)
    continuum_observations_flag = Column(Integer)
    interpolation_order = Column(Integer, nullable=False)
    weight_path = Column(Text, nullable=False)
    frozen_flags = Column(BigInteger, nullable=False)
    f_access = Column(Integer, nullable=False)
    f_format = Column(Integer, nullable=False)
    n_threads = Column(Integer, nullable=False)
    teff = Column(Float)
    e_teff = Column(Float)
    logg = Column(Float)
    e_logg = Column(Float)
    m_h = Column(Float)
    e_m_h = Column(Float)
    log10_v_sini = Column(Float)
    e_log10_v_sini = Column(Float)
    log10_v_micro = Column(Float)
    e_log10_v_micro = Column(Float)
    alpha_m = Column(Float)
    e_alpha_m = Column(Float)
    c_m = Column(Float)
    e_c_m = Column(Float)
    n_m = Column(Float)
    e_n_m = Column(Float)
    ferre_name = Column(Text, nullable=False)
    ferre_input_index = Column(Integer, nullable=False)
    ferre_output_index = Column(Integer, nullable=False)
    ferre_n_obj = Column(Integer, nullable=False)
    snr = Column(Float)
    rchi2 = Column(Float)
    penalized_rchi2 = Column(Float)
    ferre_log_snr_sq = Column(Float)
    ferre_time_load_grid = Column(Float)
    ferre_time_elapsed = Column(Float)
    ferre_flags = Column(BigInteger, nullable=False)

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class Grok(Base):
    __tablename__ = 'grok'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.grok_task_pk_seq3'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'))
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False)
    coarse_teff = Column(Float)
    coarse_logg = Column(Float)
    coarse_c_m = Column(Float)
    coarse_m_h = Column(Float)
    coarse_n_m = Column(Float)
    coarse_v_micro = Column(Float)
    coarse_v_sini = Column(Float)
    coarse_chi2 = Column(Float)
    slice_teff = Column(Float)
    slice_logg = Column(Float)
    slice_c_m = Column(Float)
    slice_m_h = Column(Float)
    slice_n_m = Column(Float)
    slice_v_micro = Column(Float)
    slice_v_sini = Column(Float)
    quad_teff = Column(Float)
    quad_logg = Column(Float)
    quad_c_m = Column(Float)
    quad_m_h = Column(Float)
    quad_n_m = Column(Float)
    quad_v_micro = Column(Float)
    quad_v_sini = Column(Float)
    teff = Column(Float)
    e_teff = Column(Float)
    logg = Column(Float)
    e_logg = Column(Float)
    v_micro = Column(Float)
    e_v_micro = Column(Float)
    m_h = Column(Float)
    e_m_h = Column(Float)
    c_m = Column(Float)
    e_c_m = Column(Float)
    n_m = Column(Float)
    e_n_m = Column(Float)
    v_sini = Column(Float)
    e_v_sini = Column(Float)
    chi2 = Column(Float)
    result_flags = Column(BigInteger, nullable=False)

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class GrokRotation(Base):
    __tablename__ = 'grok_rotation'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.grok_rotation_task_pk_seq'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'), index=True)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False, index=True)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False, index=True)
    vsini = Column(Float)
    chi2 = Column(Float)
    W = Column(ARRAY(Float()), index=True)

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class HotPayne(Base):
    __tablename__ = 'hot_payne'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.hot_payne_task_pk_seq'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'), index=True)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False, index=True)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False, index=True)
    teff = Column(Float)
    e_teff = Column(Float)
    logg = Column(Float)
    e_logg = Column(Float)
    fe_h = Column(Float)
    e_fe_h = Column(Float)
    v_micro = Column(Float)
    e_v_micro = Column(Float)
    v_sini = Column(Float)
    e_v_sini = Column(Float)
    he_h = Column(Float)
    e_he_h = Column(Float)
    c_h = Column(Float)
    e_c_h = Column(Float)
    n_h = Column(Float)
    e_n_h = Column(Float)
    o_h = Column(Float)
    e_o_h = Column(Float)
    si_h = Column(Float)
    e_si_h = Column(Float)
    s_h = Column(Float)
    e_s_h = Column(Float)
    covar = Column(ARRAY(Float()), nullable=False, index=True)
    chi2 = Column(Float)
    result_flags = Column(Integer, nullable=False)
    teff_fullspec = Column(Float)
    e_teff_fullspec = Column(Float)
    logg_fullspec = Column(Float)
    e_logg_fullspec = Column(Float)
    fe_h_fullspec = Column(Float)
    e_fe_h_fullspec = Column(Float)
    v_micro_fullspec = Column(Float)
    e_v_micro_fullspec = Column(Float)
    v_sini_fullspec = Column(Float)
    e_v_sini_fullspec = Column(Float)
    he_h_fullspec = Column(Float)
    e_he_h_fullspec = Column(Float)
    c_h_fullspec = Column(Float)
    e_c_h_fullspec = Column(Float)
    n_h_fullspec = Column(Float)
    e_n_h_fullspec = Column(Float)
    o_h_fullspec = Column(Float)
    e_o_h_fullspec = Column(Float)
    si_h_fullspec = Column(Float)
    e_si_h_fullspec = Column(Float)
    s_h_fullspec = Column(Float)
    e_s_h_fullspec = Column(Float)
    covar_fullspec = Column(ARRAY(Float()), nullable=False, index=True)
    chi2_fullspec = Column(Float)
    teff_hmasked = Column(Float)
    e_teff_hmasked = Column(Float)
    logg_hmasked = Column(Float)
    e_logg_hmasked = Column(Float)
    fe_h_hmasked = Column(Float)
    e_fe_h_hmasked = Column(Float)
    v_micro_hmasked = Column(Float)
    e_v_micro_hmasked = Column(Float)
    v_sini_hmasked = Column(Float)
    e_v_sini_hmasked = Column(Float)
    he_h_hmasked = Column(Float)
    e_he_h_hmasked = Column(Float)
    c_h_hmasked = Column(Float)
    e_c_h_hmasked = Column(Float)
    n_h_hmasked = Column(Float)
    e_n_h_hmasked = Column(Float)
    o_h_hmasked = Column(Float)
    e_o_h_hmasked = Column(Float)
    si_h_hmasked = Column(Float)
    e_si_h_hmasked = Column(Float)
    s_h_hmasked = Column(Float)
    e_s_h_hmasked = Column(Float)
    covar_hmasked = Column(ARRAY(Float()), nullable=False, index=True)
    chi2_hmasked = Column(Float)
    raw_e_teff = Column(Float(53))
    raw_e_logg = Column(Float(53))
    raw_e_fe_h = Column(Float(53))
    raw_e_v_micro = Column(Float(53))
    raw_e_v_sini = Column(Float(53))
    raw_e_he_h = Column(Float(53))
    raw_e_c_h = Column(Float(53))
    raw_e_n_h = Column(Float(53))
    raw_e_o_h = Column(Float(53))
    raw_e_si_h = Column(Float(53))
    raw_e_s_h = Column(Float(53))
    raw_e_teff_fullspec = Column(Float(53))
    raw_e_logg_fullspec = Column(Float(53))
    raw_e_fe_h_fullspec = Column(Float(53))
    raw_e_v_micro_fullspec = Column(Float(53))
    raw_e_v_sini_fullspec = Column(Float(53))
    raw_e_he_h_fullspec = Column(Float(53))
    raw_e_c_h_fullspec = Column(Float(53))
    raw_e_n_h_fullspec = Column(Float(53))
    raw_e_o_h_fullspec = Column(Float(53))
    raw_e_si_h_fullspec = Column(Float(53))
    raw_e_s_h_fullspec = Column(Float(53))
    raw_e_teff_hmasked = Column(Float(53))
    raw_e_logg_hmasked = Column(Float(53))
    raw_e_fe_h_hmasked = Column(Float(53))
    raw_e_v_micro_hmasked = Column(Float(53))
    raw_e_v_sini_hmasked = Column(Float(53))
    raw_e_he_h_hmasked = Column(Float(53))
    raw_e_c_h_hmasked = Column(Float(53))
    raw_e_n_h_hmasked = Column(Float(53))
    raw_e_o_h_hmasked = Column(Float(53))
    raw_e_si_h_hmasked = Column(Float(53))
    raw_e_s_h_hmasked = Column(Float(53))

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class LineForest(Base):
    __tablename__ = 'line_forest'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.line_forest_task_pk_seq1'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'))
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False)
    eqw_h_alpha = Column(Float)
    abs_h_alpha = Column(Float)
    detection_stat_h_alpha = Column(Float)
    detection_raw_h_alpha = Column(Float)
    eqw_percentiles_h_alpha = Column(ARRAY(Float()))
    abs_percentiles_h_alpha = Column(ARRAY(Float()))
    eqw_h_beta = Column(Float)
    abs_h_beta = Column(Float)
    detection_stat_h_beta = Column(Float)
    detection_raw_h_beta = Column(Float)
    eqw_percentiles_h_beta = Column(ARRAY(Float()))
    abs_percentiles_h_beta = Column(ARRAY(Float()))
    eqw_h_gamma = Column(Float)
    abs_h_gamma = Column(Float)
    detection_stat_h_gamma = Column(Float)
    detection_raw_h_gamma = Column(Float)
    eqw_percentiles_h_gamma = Column(ARRAY(Float()))
    abs_percentiles_h_gamma = Column(ARRAY(Float()))
    eqw_h_delta = Column(Float)
    abs_h_delta = Column(Float)
    detection_stat_h_delta = Column(Float)
    detection_raw_h_delta = Column(Float)
    eqw_percentiles_h_delta = Column(ARRAY(Float()))
    abs_percentiles_h_delta = Column(ARRAY(Float()))
    eqw_h_epsilon = Column(Float)
    abs_h_epsilon = Column(Float)
    detection_stat_h_epsilon = Column(Float)
    detection_raw_h_epsilon = Column(Float)
    eqw_percentiles_h_epsilon = Column(ARRAY(Float()))
    abs_percentiles_h_epsilon = Column(ARRAY(Float()))
    eqw_h_8 = Column(Float)
    abs_h_8 = Column(Float)
    detection_stat_h_8 = Column(Float)
    detection_raw_h_8 = Column(Float)
    eqw_percentiles_h_8 = Column(ARRAY(Float()))
    abs_percentiles_h_8 = Column(ARRAY(Float()))
    eqw_h_9 = Column(Float)
    abs_h_9 = Column(Float)
    detection_stat_h_9 = Column(Float)
    detection_raw_h_9 = Column(Float)
    eqw_percentiles_h_9 = Column(ARRAY(Float()))
    abs_percentiles_h_9 = Column(ARRAY(Float()))
    eqw_h_10 = Column(Float)
    abs_h_10 = Column(Float)
    detection_stat_h_10 = Column(Float)
    detection_raw_h_10 = Column(Float)
    eqw_percentiles_h_10 = Column(ARRAY(Float()))
    abs_percentiles_h_10 = Column(ARRAY(Float()))
    eqw_h_11 = Column(Float)
    abs_h_11 = Column(Float)
    detection_stat_h_11 = Column(Float)
    detection_raw_h_11 = Column(Float)
    eqw_percentiles_h_11 = Column(ARRAY(Float()))
    abs_percentiles_h_11 = Column(ARRAY(Float()))
    eqw_h_12 = Column(Float)
    abs_h_12 = Column(Float)
    detection_stat_h_12 = Column(Float)
    detection_raw_h_12 = Column(Float)
    eqw_percentiles_h_12 = Column(ARRAY(Float()))
    abs_percentiles_h_12 = Column(ARRAY(Float()))
    eqw_h_13 = Column(Float)
    abs_h_13 = Column(Float)
    detection_stat_h_13 = Column(Float)
    detection_raw_h_13 = Column(Float)
    eqw_percentiles_h_13 = Column(ARRAY(Float()))
    abs_percentiles_h_13 = Column(ARRAY(Float()))
    eqw_h_14 = Column(Float)
    abs_h_14 = Column(Float)
    detection_stat_h_14 = Column(Float)
    detection_raw_h_14 = Column(Float)
    eqw_percentiles_h_14 = Column(ARRAY(Float()))
    abs_percentiles_h_14 = Column(ARRAY(Float()))
    eqw_h_15 = Column(Float)
    abs_h_15 = Column(Float)
    detection_stat_h_15 = Column(Float)
    detection_raw_h_15 = Column(Float)
    eqw_percentiles_h_15 = Column(ARRAY(Float()))
    abs_percentiles_h_15 = Column(ARRAY(Float()))
    eqw_h_16 = Column(Float)
    abs_h_16 = Column(Float)
    detection_stat_h_16 = Column(Float)
    detection_raw_h_16 = Column(Float)
    eqw_percentiles_h_16 = Column(ARRAY(Float()))
    abs_percentiles_h_16 = Column(ARRAY(Float()))
    eqw_h_17 = Column(Float)
    abs_h_17 = Column(Float)
    detection_stat_h_17 = Column(Float)
    detection_raw_h_17 = Column(Float)
    eqw_percentiles_h_17 = Column(ARRAY(Float()))
    abs_percentiles_h_17 = Column(ARRAY(Float()))
    eqw_pa_7 = Column(Float)
    abs_pa_7 = Column(Float)
    detection_stat_pa_7 = Column(Float)
    detection_raw_pa_7 = Column(Float)
    eqw_percentiles_pa_7 = Column(ARRAY(Float()))
    abs_percentiles_pa_7 = Column(ARRAY(Float()))
    eqw_pa_8 = Column(Float)
    abs_pa_8 = Column(Float)
    detection_stat_pa_8 = Column(Float)
    detection_raw_pa_8 = Column(Float)
    eqw_percentiles_pa_8 = Column(ARRAY(Float()))
    abs_percentiles_pa_8 = Column(ARRAY(Float()))
    eqw_pa_9 = Column(Float)
    abs_pa_9 = Column(Float)
    detection_stat_pa_9 = Column(Float)
    detection_raw_pa_9 = Column(Float)
    eqw_percentiles_pa_9 = Column(ARRAY(Float()))
    abs_percentiles_pa_9 = Column(ARRAY(Float()))
    eqw_pa_10 = Column(Float)
    abs_pa_10 = Column(Float)
    detection_stat_pa_10 = Column(Float)
    detection_raw_pa_10 = Column(Float)
    eqw_percentiles_pa_10 = Column(ARRAY(Float()))
    abs_percentiles_pa_10 = Column(ARRAY(Float()))
    eqw_pa_11 = Column(Float)
    abs_pa_11 = Column(Float)
    detection_stat_pa_11 = Column(Float)
    detection_raw_pa_11 = Column(Float)
    eqw_percentiles_pa_11 = Column(ARRAY(Float()))
    abs_percentiles_pa_11 = Column(ARRAY(Float()))
    eqw_pa_12 = Column(Float)
    abs_pa_12 = Column(Float)
    detection_stat_pa_12 = Column(Float)
    detection_raw_pa_12 = Column(Float)
    eqw_percentiles_pa_12 = Column(ARRAY(Float()))
    abs_percentiles_pa_12 = Column(ARRAY(Float()))
    eqw_pa_13 = Column(Float)
    abs_pa_13 = Column(Float)
    detection_stat_pa_13 = Column(Float)
    detection_raw_pa_13 = Column(Float)
    eqw_percentiles_pa_13 = Column(ARRAY(Float()))
    abs_percentiles_pa_13 = Column(ARRAY(Float()))
    eqw_pa_14 = Column(Float)
    abs_pa_14 = Column(Float)
    detection_stat_pa_14 = Column(Float)
    detection_raw_pa_14 = Column(Float)
    eqw_percentiles_pa_14 = Column(ARRAY(Float()))
    abs_percentiles_pa_14 = Column(ARRAY(Float()))
    eqw_pa_15 = Column(Float)
    abs_pa_15 = Column(Float)
    detection_stat_pa_15 = Column(Float)
    detection_raw_pa_15 = Column(Float)
    eqw_percentiles_pa_15 = Column(ARRAY(Float()))
    abs_percentiles_pa_15 = Column(ARRAY(Float()))
    eqw_pa_16 = Column(Float)
    abs_pa_16 = Column(Float)
    detection_stat_pa_16 = Column(Float)
    detection_raw_pa_16 = Column(Float)
    eqw_percentiles_pa_16 = Column(ARRAY(Float()))
    abs_percentiles_pa_16 = Column(ARRAY(Float()))
    eqw_pa_17 = Column(Float)
    abs_pa_17 = Column(Float)
    detection_stat_pa_17 = Column(Float)
    detection_raw_pa_17 = Column(Float)
    eqw_percentiles_pa_17 = Column(ARRAY(Float()))
    abs_percentiles_pa_17 = Column(ARRAY(Float()))
    eqw_ca_ii_8662 = Column(Float)
    abs_ca_ii_8662 = Column(Float)
    detection_stat_ca_ii_8662 = Column(Float)
    detection_raw_ca_ii_8662 = Column(Float)
    eqw_percentiles_ca_ii_8662 = Column(ARRAY(Float()))
    abs_percentiles_ca_ii_8662 = Column(ARRAY(Float()))
    eqw_ca_ii_8542 = Column(Float)
    abs_ca_ii_8542 = Column(Float)
    detection_stat_ca_ii_8542 = Column(Float)
    detection_raw_ca_ii_8542 = Column(Float)
    eqw_percentiles_ca_ii_8542 = Column(ARRAY(Float()))
    abs_percentiles_ca_ii_8542 = Column(ARRAY(Float()))
    eqw_ca_ii_8498 = Column(Float)
    abs_ca_ii_8498 = Column(Float)
    detection_stat_ca_ii_8498 = Column(Float)
    detection_raw_ca_ii_8498 = Column(Float)
    eqw_percentiles_ca_ii_8498 = Column(ARRAY(Float()))
    abs_percentiles_ca_ii_8498 = Column(ARRAY(Float()))
    eqw_ca_k_3933 = Column(Float)
    abs_ca_k_3933 = Column(Float)
    detection_stat_ca_k_3933 = Column(Float)
    detection_raw_ca_k_3933 = Column(Float)
    eqw_percentiles_ca_k_3933 = Column(ARRAY(Float()))
    abs_percentiles_ca_k_3933 = Column(ARRAY(Float()))
    eqw_ca_h_3968 = Column(Float)
    abs_ca_h_3968 = Column(Float)
    detection_stat_ca_h_3968 = Column(Float)
    detection_raw_ca_h_3968 = Column(Float)
    eqw_percentiles_ca_h_3968 = Column(ARRAY(Float()))
    abs_percentiles_ca_h_3968 = Column(ARRAY(Float()))
    eqw_he_i_6678 = Column(Float)
    abs_he_i_6678 = Column(Float)
    detection_stat_he_i_6678 = Column(Float)
    detection_raw_he_i_6678 = Column(Float)
    eqw_percentiles_he_i_6678 = Column(ARRAY(Float()))
    abs_percentiles_he_i_6678 = Column(ARRAY(Float()))
    eqw_he_i_5875 = Column(Float)
    abs_he_i_5875 = Column(Float)
    detection_stat_he_i_5875 = Column(Float)
    detection_raw_he_i_5875 = Column(Float)
    eqw_percentiles_he_i_5875 = Column(ARRAY(Float()))
    abs_percentiles_he_i_5875 = Column(ARRAY(Float()))
    eqw_he_i_5015 = Column(Float)
    abs_he_i_5015 = Column(Float)
    detection_stat_he_i_5015 = Column(Float)
    detection_raw_he_i_5015 = Column(Float)
    eqw_percentiles_he_i_5015 = Column(ARRAY(Float()))
    abs_percentiles_he_i_5015 = Column(ARRAY(Float()))
    eqw_he_i_4471 = Column(Float)
    abs_he_i_4471 = Column(Float)
    detection_stat_he_i_4471 = Column(Float)
    detection_raw_he_i_4471 = Column(Float)
    eqw_percentiles_he_i_4471 = Column(ARRAY(Float()))
    abs_percentiles_he_i_4471 = Column(ARRAY(Float()))
    eqw_he_ii_4685 = Column(Float)
    abs_he_ii_4685 = Column(Float)
    detection_stat_he_ii_4685 = Column(Float)
    detection_raw_he_ii_4685 = Column(Float)
    eqw_percentiles_he_ii_4685 = Column(ARRAY(Float()))
    abs_percentiles_he_ii_4685 = Column(ARRAY(Float()))
    eqw_n_ii_6583 = Column(Float)
    abs_n_ii_6583 = Column(Float)
    detection_stat_n_ii_6583 = Column(Float)
    detection_raw_n_ii_6583 = Column(Float)
    eqw_percentiles_n_ii_6583 = Column(ARRAY(Float()))
    abs_percentiles_n_ii_6583 = Column(ARRAY(Float()))
    eqw_n_ii_6548 = Column(Float)
    abs_n_ii_6548 = Column(Float)
    detection_stat_n_ii_6548 = Column(Float)
    detection_raw_n_ii_6548 = Column(Float)
    eqw_percentiles_n_ii_6548 = Column(ARRAY(Float()))
    abs_percentiles_n_ii_6548 = Column(ARRAY(Float()))
    eqw_s_ii_6716 = Column(Float)
    abs_s_ii_6716 = Column(Float)
    detection_stat_s_ii_6716 = Column(Float)
    detection_raw_s_ii_6716 = Column(Float)
    eqw_percentiles_s_ii_6716 = Column(ARRAY(Float()))
    abs_percentiles_s_ii_6716 = Column(ARRAY(Float()))
    eqw_s_ii_6730 = Column(Float)
    abs_s_ii_6730 = Column(Float)
    detection_stat_s_ii_6730 = Column(Float)
    detection_raw_s_ii_6730 = Column(Float)
    eqw_percentiles_s_ii_6730 = Column(ARRAY(Float()))
    abs_percentiles_s_ii_6730 = Column(ARRAY(Float()))
    eqw_fe_ii_5018 = Column(Float)
    abs_fe_ii_5018 = Column(Float)
    detection_stat_fe_ii_5018 = Column(Float)
    detection_raw_fe_ii_5018 = Column(Float)
    eqw_percentiles_fe_ii_5018 = Column(ARRAY(Float()))
    abs_percentiles_fe_ii_5018 = Column(ARRAY(Float()))
    eqw_fe_ii_5169 = Column(Float)
    abs_fe_ii_5169 = Column(Float)
    detection_stat_fe_ii_5169 = Column(Float)
    detection_raw_fe_ii_5169 = Column(Float)
    eqw_percentiles_fe_ii_5169 = Column(ARRAY(Float()))
    abs_percentiles_fe_ii_5169 = Column(ARRAY(Float()))
    eqw_fe_ii_5197 = Column(Float)
    abs_fe_ii_5197 = Column(Float)
    detection_stat_fe_ii_5197 = Column(Float)
    detection_raw_fe_ii_5197 = Column(Float)
    eqw_percentiles_fe_ii_5197 = Column(ARRAY(Float()))
    abs_percentiles_fe_ii_5197 = Column(ARRAY(Float()))
    eqw_fe_ii_6432 = Column(Float)
    abs_fe_ii_6432 = Column(Float)
    detection_stat_fe_ii_6432 = Column(Float)
    detection_raw_fe_ii_6432 = Column(Float)
    eqw_percentiles_fe_ii_6432 = Column(ARRAY(Float()))
    abs_percentiles_fe_ii_6432 = Column(ARRAY(Float()))
    eqw_o_i_5577 = Column(Float)
    abs_o_i_5577 = Column(Float)
    detection_stat_o_i_5577 = Column(Float)
    detection_raw_o_i_5577 = Column(Float)
    eqw_percentiles_o_i_5577 = Column(ARRAY(Float()))
    abs_percentiles_o_i_5577 = Column(ARRAY(Float()))
    eqw_o_i_6300 = Column(Float)
    abs_o_i_6300 = Column(Float)
    detection_stat_o_i_6300 = Column(Float)
    detection_raw_o_i_6300 = Column(Float)
    eqw_percentiles_o_i_6300 = Column(ARRAY(Float()))
    abs_percentiles_o_i_6300 = Column(ARRAY(Float()))
    eqw_o_i_6363 = Column(Float)
    abs_o_i_6363 = Column(Float)
    detection_stat_o_i_6363 = Column(Float)
    detection_raw_o_i_6363 = Column(Float)
    eqw_percentiles_o_i_6363 = Column(ARRAY(Float()))
    abs_percentiles_o_i_6363 = Column(ARRAY(Float()))
    eqw_o_ii_3727 = Column(Float)
    abs_o_ii_3727 = Column(Float)
    detection_stat_o_ii_3727 = Column(Float)
    detection_raw_o_ii_3727 = Column(Float)
    eqw_percentiles_o_ii_3727 = Column(ARRAY(Float()))
    abs_percentiles_o_ii_3727 = Column(ARRAY(Float()))
    eqw_o_iii_4959 = Column(Float)
    abs_o_iii_4959 = Column(Float)
    detection_stat_o_iii_4959 = Column(Float)
    detection_raw_o_iii_4959 = Column(Float)
    eqw_percentiles_o_iii_4959 = Column(ARRAY(Float()))
    abs_percentiles_o_iii_4959 = Column(ARRAY(Float()))
    eqw_o_iii_5006 = Column(Float)
    abs_o_iii_5006 = Column(Float)
    detection_stat_o_iii_5006 = Column(Float)
    detection_raw_o_iii_5006 = Column(Float)
    eqw_percentiles_o_iii_5006 = Column(ARRAY(Float()))
    abs_percentiles_o_iii_5006 = Column(ARRAY(Float()))
    eqw_o_iii_4363 = Column(Float)
    abs_o_iii_4363 = Column(Float)
    detection_stat_o_iii_4363 = Column(Float)
    detection_raw_o_iii_4363 = Column(Float)
    eqw_percentiles_o_iii_4363 = Column(ARRAY(Float()))
    abs_percentiles_o_iii_4363 = Column(ARRAY(Float()))
    eqw_li_i = Column(Float)
    abs_li_i = Column(Float)
    detection_stat_li_i = Column(Float)
    detection_raw_li_i = Column(Float)
    eqw_percentiles_li_i = Column(ARRAY(Float()))
    abs_percentiles_li_i = Column(ARRAY(Float()))

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class MDwarfType(Base):
    __tablename__ = 'm_dwarf_type'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.m_dwarf_type_task_pk_seq'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'), index=True)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False, index=True)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False, index=True)
    spectral_type = Column(Text, nullable=False)
    sub_type = Column(Float, nullable=False)
    rchi2 = Column(Float, nullable=False)
    continuum = Column(Float)
    result_flags = Column(BigInteger, nullable=False)

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class NmfRectify(Base):
    __tablename__ = 'nmf_rectify'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.nmf_rectify_task_pk_seq'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'), index=True)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False, index=True)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False, index=True)
    log10_W = Column(ARRAY(Float()), index=True)
    continuum_theta = Column(ARRAY(Float()), index=True)
    L = Column(Float, nullable=False)
    deg = Column(Integer, nullable=False)
    rchi2 = Column(Float)
    joint_rchi2 = Column(Float)
    nmf_flags = Column(BigInteger)

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class Slam(Base):
    __tablename__ = 'slam'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.slam_task_pk_seq'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'), index=True)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False, index=True)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False, index=True)
    teff = Column(Float)
    e_teff = Column(Float)
    logg = Column(Float)
    e_logg = Column(Float)
    fe_h = Column(Float)
    e_fe_h = Column(Float)
    rho_teff_logg = Column(Float)
    rho_teff_fe_h = Column(Float)
    rho_logg_fe_h = Column(Float)
    initial_teff = Column(Float)
    initial_logg = Column(Float)
    initial_fe_h = Column(Float)
    success = Column(Boolean, nullable=False)
    status = Column(Integer, nullable=False)
    optimality = Column(Boolean, nullable=False)
    result_flags = Column(BigInteger, nullable=False)
    chi2 = Column(Float, nullable=False)
    rchi2 = Column(Float, nullable=False)
    bad_flag = Column(Boolean, server_default=text("false"))
    warn_flag = Column(Boolean, server_default=text("false"))

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class SnowWhite(Base):
    __tablename__ = 'snow_white'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.snow_white_task_pk_seq'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'), index=True)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False, index=True)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False, index=True)
    classification = Column(Text)
    p_cv = Column(Float)
    p_da = Column(Float)
    p_dab = Column(Float)
    p_dabz = Column(Float)
    p_dah = Column(Float)
    p_dahe = Column(Float)
    p_dao = Column(Float)
    p_daz = Column(Float)
    p_da_ms = Column(Float)
    p_db = Column(Float)
    p_dba = Column(Float)
    p_dbaz = Column(Float)
    p_dbh = Column(Float)
    p_dbz = Column(Float)
    p_db_ms = Column(Float)
    p_dc = Column(Float)
    p_dc_ms = Column(Float)
    p_do = Column(Float)
    p_dq = Column(Float)
    p_dqz = Column(Float)
    p_dqpec = Column(Float)
    p_dz = Column(Float)
    p_dza = Column(Float)
    p_dzb = Column(Float)
    p_dzba = Column(Float)
    p_mwd = Column(Float)
    p_hotdq = Column(Float)
    teff = Column(Float)
    e_teff = Column(Float)
    logg = Column(Float)
    e_logg = Column(Float)
    v_rel = Column(Float)
    result_flags = Column(BigInteger, nullable=False)
    raw_e_teff = Column(Float(53))
    raw_e_logg = Column(Float(53))

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class SpectrumClassification(Base):
    __tablename__ = 'spectrum_classification'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.spectrum_classification_task_pk_seq'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'), index=True)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False, index=True)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False, index=True)
    p_cv = Column(Float, nullable=False)
    lp_cv = Column(Float, nullable=False)
    p_fgkm = Column(Float, nullable=False)
    lp_fgkm = Column(Float, nullable=False)
    p_oba = Column(Float, nullable=False)
    lp_oba = Column(Float, nullable=False)
    p_wd = Column(Float, nullable=False)
    lp_wd = Column(Float, nullable=False)
    p_sb2 = Column(Float, nullable=False)
    lp_sb2 = Column(Float, nullable=False)
    p_yso = Column(Float, nullable=False)
    lp_yso = Column(Float, nullable=False)
    classification_flags = Column(BigInteger, nullable=False)

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class TheCannon(Base):
    __tablename__ = 'the_cannon'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.the_cannon_task_pk_seq'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'), index=True)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False, index=True)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False, index=True)
    teff = Column(Float, nullable=False)
    e_teff = Column(Float, nullable=False)
    logg = Column(Float, nullable=False)
    e_logg = Column(Float, nullable=False)
    fe_h = Column(Float, nullable=False)
    e_fe_h = Column(Float, nullable=False)
    v_micro = Column(Float, nullable=False)
    e_v_micro = Column(Float, nullable=False)
    v_macro = Column(Float, nullable=False)
    e_v_macro = Column(Float, nullable=False)
    c_fe = Column(Float, nullable=False)
    e_c_fe = Column(Float, nullable=False)
    n_fe = Column(Float, nullable=False)
    e_n_fe = Column(Float, nullable=False)
    o_fe = Column(Float, nullable=False)
    e_o_fe = Column(Float, nullable=False)
    na_fe = Column(Float, nullable=False)
    e_na_fe = Column(Float, nullable=False)
    mg_fe = Column(Float, nullable=False)
    e_mg_fe = Column(Float, nullable=False)
    al_fe = Column(Float, nullable=False)
    e_al_fe = Column(Float, nullable=False)
    si_fe = Column(Float, nullable=False)
    e_si_fe = Column(Float, nullable=False)
    s_fe = Column(Float, nullable=False)
    e_s_fe = Column(Float, nullable=False)
    k_fe = Column(Float, nullable=False)
    e_k_fe = Column(Float, nullable=False)
    ca_fe = Column(Float, nullable=False)
    e_ca_fe = Column(Float, nullable=False)
    ti_fe = Column(Float, nullable=False)
    e_ti_fe = Column(Float, nullable=False)
    v_fe = Column(Float, nullable=False)
    e_v_fe = Column(Float, nullable=False)
    cr_fe = Column(Float, nullable=False)
    e_cr_fe = Column(Float, nullable=False)
    mn_fe = Column(Float, nullable=False)
    e_mn_fe = Column(Float, nullable=False)
    ni_fe = Column(Float, nullable=False)
    e_ni_fe = Column(Float, nullable=False)
    chi2 = Column(Float, nullable=False)
    rchi2 = Column(Float, nullable=False)
    ier = Column(Integer, nullable=False)
    nfev = Column(Integer, nullable=False)
    x0_index = Column(Integer, nullable=False)
    result_flags = Column(BigInteger, nullable=False)
    raw_e_teff = Column(Float(53))
    raw_e_logg = Column(Float(53))
    raw_e_fe_h = Column(Float(53))
    raw_e_v_micro = Column(Float(53))
    raw_e_v_macro = Column(Float(53))
    raw_e_c_fe = Column(Float(53))
    raw_e_n_fe = Column(Float(53))
    raw_e_o_fe = Column(Float(53))
    raw_e_na_fe = Column(Float(53))
    raw_e_mg_fe = Column(Float(53))
    raw_e_al_fe = Column(Float(53))
    raw_e_si_fe = Column(Float(53))
    raw_e_s_fe = Column(Float(53))
    raw_e_k_fe = Column(Float(53))
    raw_e_ca_fe = Column(Float(53))
    raw_e_ti_fe = Column(Float(53))
    raw_e_v_fe = Column(Float(53))
    raw_e_cr_fe = Column(Float(53))
    raw_e_mn_fe = Column(Float(53))
    raw_e_ni_fe = Column(Float(53))

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class ThePayne(Base):
    __tablename__ = 'the_payne'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.the_payne_task_pk_seq'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'), index=True)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False, index=True)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False, index=True)
    v_rel = Column(Float)
    teff = Column(Float)
    e_teff = Column(Float)
    logg = Column(Float)
    e_logg = Column(Float)
    v_turb = Column(Float)
    e_v_turb = Column(Float)
    c_h = Column(Float)
    e_c_h = Column(Float)
    n_h = Column(Float)
    e_n_h = Column(Float)
    o_h = Column(Float)
    e_o_h = Column(Float)
    na_h = Column(Float)
    e_na_h = Column(Float)
    mg_h = Column(Float)
    e_mg_h = Column(Float)
    al_h = Column(Float)
    e_al_h = Column(Float)
    si_h = Column(Float)
    e_si_h = Column(Float)
    p_h = Column(Float)
    e_p_h = Column(Float)
    s_h = Column(Float)
    e_s_h = Column(Float)
    k_h = Column(Float)
    e_k_h = Column(Float)
    ca_h = Column(Float)
    e_ca_h = Column(Float)
    ti_h = Column(Float)
    e_ti_h = Column(Float)
    v_h = Column(Float)
    e_v_h = Column(Float)
    cr_h = Column(Float)
    e_cr_h = Column(Float)
    mn_h = Column(Float)
    e_mn_h = Column(Float)
    fe_h = Column(Float)
    e_fe_h = Column(Float)
    co_h = Column(Float)
    e_co_h = Column(Float)
    ni_h = Column(Float)
    e_ni_h = Column(Float)
    cu_h = Column(Float)
    e_cu_h = Column(Float)
    ge_h = Column(Float)
    e_ge_h = Column(Float)
    c12_c13 = Column(Float)
    e_c12_c13 = Column(Float)
    v_macro = Column(Float)
    e_v_macro = Column(Float)
    chi2 = Column(Float)
    reduced_chi2 = Column(Float)
    result_flags = Column(BigInteger, nullable=False)
    rho_teff_logg = Column(Float)
    rho_teff_v_turb = Column(Float)
    rho_teff_c_h = Column(Float)
    rho_teff_n_h = Column(Float)
    rho_teff_o_h = Column(Float)
    rho_teff_na_h = Column(Float)
    rho_teff_mg_h = Column(Float)
    rho_teff_al_h = Column(Float)
    rho_teff_si_h = Column(Float)
    rho_teff_p_h = Column(Float)
    rho_teff_s_h = Column(Float)
    rho_teff_k_h = Column(Float)
    rho_teff_ca_h = Column(Float)
    rho_teff_ti_h = Column(Float)
    rho_teff_v_h = Column(Float)
    rho_teff_cr_h = Column(Float)
    rho_teff_mn_h = Column(Float)
    rho_teff_fe_h = Column(Float)
    rho_teff_co_h = Column(Float)
    rho_teff_ni_h = Column(Float)
    rho_teff_cu_h = Column(Float)
    rho_teff_ge_h = Column(Float)
    rho_teff_c12_c13 = Column(Float)
    rho_teff_v_macro = Column(Float)
    rho_logg_v_turb = Column(Float)
    rho_logg_c_h = Column(Float)
    rho_logg_n_h = Column(Float)
    rho_logg_o_h = Column(Float)
    rho_logg_na_h = Column(Float)
    rho_logg_mg_h = Column(Float)
    rho_logg_al_h = Column(Float)
    rho_logg_si_h = Column(Float)
    rho_logg_p_h = Column(Float)
    rho_logg_s_h = Column(Float)
    rho_logg_k_h = Column(Float)
    rho_logg_ca_h = Column(Float)
    rho_logg_ti_h = Column(Float)
    rho_logg_v_h = Column(Float)
    rho_logg_cr_h = Column(Float)
    rho_logg_mn_h = Column(Float)
    rho_logg_fe_h = Column(Float)
    rho_logg_co_h = Column(Float)
    rho_logg_ni_h = Column(Float)
    rho_logg_cu_h = Column(Float)
    rho_logg_ge_h = Column(Float)
    rho_logg_c12_c13 = Column(Float)
    rho_logg_v_macro = Column(Float)
    rho_v_turb_c_h = Column(Float)
    rho_v_turb_n_h = Column(Float)
    rho_v_turb_o_h = Column(Float)
    rho_v_turb_na_h = Column(Float)
    rho_v_turb_mg_h = Column(Float)
    rho_v_turb_al_h = Column(Float)
    rho_v_turb_si_h = Column(Float)
    rho_v_turb_p_h = Column(Float)
    rho_v_turb_s_h = Column(Float)
    rho_v_turb_k_h = Column(Float)
    rho_v_turb_ca_h = Column(Float)
    rho_v_turb_ti_h = Column(Float)
    rho_v_turb_v_h = Column(Float)
    rho_v_turb_cr_h = Column(Float)
    rho_v_turb_mn_h = Column(Float)
    rho_v_turb_fe_h = Column(Float)
    rho_v_turb_co_h = Column(Float)
    rho_v_turb_ni_h = Column(Float)
    rho_v_turb_cu_h = Column(Float)
    rho_v_turb_ge_h = Column(Float)
    rho_v_turb_c12_c13 = Column(Float)
    rho_v_turb_v_macro = Column(Float)
    rho_c_h_n_h = Column(Float)
    rho_c_h_o_h = Column(Float)
    rho_c_h_na_h = Column(Float)
    rho_c_h_mg_h = Column(Float)
    rho_c_h_al_h = Column(Float)
    rho_c_h_si_h = Column(Float)
    rho_c_h_p_h = Column(Float)
    rho_c_h_s_h = Column(Float)
    rho_c_h_k_h = Column(Float)
    rho_c_h_ca_h = Column(Float)
    rho_c_h_ti_h = Column(Float)
    rho_c_h_v_h = Column(Float)
    rho_c_h_cr_h = Column(Float)
    rho_c_h_mn_h = Column(Float)
    rho_c_h_fe_h = Column(Float)
    rho_c_h_co_h = Column(Float)
    rho_c_h_ni_h = Column(Float)
    rho_c_h_cu_h = Column(Float)
    rho_c_h_ge_h = Column(Float)
    rho_c_h_c12_c13 = Column(Float)
    rho_c_h_v_macro = Column(Float)
    rho_n_h_o_h = Column(Float)
    rho_n_h_na_h = Column(Float)
    rho_n_h_mg_h = Column(Float)
    rho_n_h_al_h = Column(Float)
    rho_n_h_si_h = Column(Float)
    rho_n_h_p_h = Column(Float)
    rho_n_h_s_h = Column(Float)
    rho_n_h_k_h = Column(Float)
    rho_n_h_ca_h = Column(Float)
    rho_n_h_ti_h = Column(Float)
    rho_n_h_v_h = Column(Float)
    rho_n_h_cr_h = Column(Float)
    rho_n_h_mn_h = Column(Float)
    rho_n_h_fe_h = Column(Float)
    rho_n_h_co_h = Column(Float)
    rho_n_h_ni_h = Column(Float)
    rho_n_h_cu_h = Column(Float)
    rho_n_h_ge_h = Column(Float)
    rho_n_h_c12_c13 = Column(Float)
    rho_n_h_v_macro = Column(Float)
    rho_o_h_na_h = Column(Float)
    rho_o_h_mg_h = Column(Float)
    rho_o_h_al_h = Column(Float)
    rho_o_h_si_h = Column(Float)
    rho_o_h_p_h = Column(Float)
    rho_o_h_s_h = Column(Float)
    rho_o_h_k_h = Column(Float)
    rho_o_h_ca_h = Column(Float)
    rho_o_h_ti_h = Column(Float)
    rho_o_h_v_h = Column(Float)
    rho_o_h_cr_h = Column(Float)
    rho_o_h_mn_h = Column(Float)
    rho_o_h_fe_h = Column(Float)
    rho_o_h_co_h = Column(Float)
    rho_o_h_ni_h = Column(Float)
    rho_o_h_cu_h = Column(Float)
    rho_o_h_ge_h = Column(Float)
    rho_o_h_c12_c13 = Column(Float)
    rho_o_h_v_macro = Column(Float)
    rho_na_h_mg_h = Column(Float)
    rho_na_h_al_h = Column(Float)
    rho_na_h_si_h = Column(Float)
    rho_na_h_p_h = Column(Float)
    rho_na_h_s_h = Column(Float)
    rho_na_h_k_h = Column(Float)
    rho_na_h_ca_h = Column(Float)
    rho_na_h_ti_h = Column(Float)
    rho_na_h_v_h = Column(Float)
    rho_na_h_cr_h = Column(Float)
    rho_na_h_mn_h = Column(Float)
    rho_na_h_fe_h = Column(Float)
    rho_na_h_co_h = Column(Float)
    rho_na_h_ni_h = Column(Float)
    rho_na_h_cu_h = Column(Float)
    rho_na_h_ge_h = Column(Float)
    rho_na_h_c12_c13 = Column(Float)
    rho_na_h_v_macro = Column(Float)
    rho_mg_h_al_h = Column(Float)
    rho_mg_h_si_h = Column(Float)
    rho_mg_h_p_h = Column(Float)
    rho_mg_h_s_h = Column(Float)
    rho_mg_h_k_h = Column(Float)
    rho_mg_h_ca_h = Column(Float)
    rho_mg_h_ti_h = Column(Float)
    rho_mg_h_v_h = Column(Float)
    rho_mg_h_cr_h = Column(Float)
    rho_mg_h_mn_h = Column(Float)
    rho_mg_h_fe_h = Column(Float)
    rho_mg_h_co_h = Column(Float)
    rho_mg_h_ni_h = Column(Float)
    rho_mg_h_cu_h = Column(Float)
    rho_mg_h_ge_h = Column(Float)
    rho_mg_h_c12_c13 = Column(Float)
    rho_mg_h_v_macro = Column(Float)
    rho_al_h_si_h = Column(Float)
    rho_al_h_p_h = Column(Float)
    rho_al_h_s_h = Column(Float)
    rho_al_h_k_h = Column(Float)
    rho_al_h_ca_h = Column(Float)
    rho_al_h_ti_h = Column(Float)
    rho_al_h_v_h = Column(Float)
    rho_al_h_cr_h = Column(Float)
    rho_al_h_mn_h = Column(Float)
    rho_al_h_fe_h = Column(Float)
    rho_al_h_co_h = Column(Float)
    rho_al_h_ni_h = Column(Float)
    rho_al_h_cu_h = Column(Float)
    rho_al_h_ge_h = Column(Float)
    rho_al_h_c12_c13 = Column(Float)
    rho_al_h_v_macro = Column(Float)
    rho_si_h_p_h = Column(Float)
    rho_si_h_s_h = Column(Float)
    rho_si_h_k_h = Column(Float)
    rho_si_h_ca_h = Column(Float)
    rho_si_h_ti_h = Column(Float)
    rho_si_h_v_h = Column(Float)
    rho_si_h_cr_h = Column(Float)
    rho_si_h_mn_h = Column(Float)
    rho_si_h_fe_h = Column(Float)
    rho_si_h_co_h = Column(Float)
    rho_si_h_ni_h = Column(Float)
    rho_si_h_cu_h = Column(Float)
    rho_si_h_ge_h = Column(Float)
    rho_si_h_c12_c13 = Column(Float)
    rho_si_h_v_macro = Column(Float)
    rho_p_h_s_h = Column(Float)
    rho_p_h_k_h = Column(Float)
    rho_p_h_ca_h = Column(Float)
    rho_p_h_ti_h = Column(Float)
    rho_p_h_v_h = Column(Float)
    rho_p_h_cr_h = Column(Float)
    rho_p_h_mn_h = Column(Float)
    rho_p_h_fe_h = Column(Float)
    rho_p_h_co_h = Column(Float)
    rho_p_h_ni_h = Column(Float)
    rho_p_h_cu_h = Column(Float)
    rho_p_h_ge_h = Column(Float)
    rho_p_h_c12_c13 = Column(Float)
    rho_p_h_v_macro = Column(Float)
    rho_s_h_k_h = Column(Float)
    rho_s_h_ca_h = Column(Float)
    rho_s_h_ti_h = Column(Float)
    rho_s_h_v_h = Column(Float)
    rho_s_h_cr_h = Column(Float)
    rho_s_h_mn_h = Column(Float)
    rho_s_h_fe_h = Column(Float)
    rho_s_h_co_h = Column(Float)
    rho_s_h_ni_h = Column(Float)
    rho_s_h_cu_h = Column(Float)
    rho_s_h_ge_h = Column(Float)
    rho_s_h_c12_c13 = Column(Float)
    rho_s_h_v_macro = Column(Float)
    rho_k_h_ca_h = Column(Float)
    rho_k_h_ti_h = Column(Float)
    rho_k_h_v_h = Column(Float)
    rho_k_h_cr_h = Column(Float)
    rho_k_h_mn_h = Column(Float)
    rho_k_h_fe_h = Column(Float)
    rho_k_h_co_h = Column(Float)
    rho_k_h_ni_h = Column(Float)
    rho_k_h_cu_h = Column(Float)
    rho_k_h_ge_h = Column(Float)
    rho_k_h_c12_c13 = Column(Float)
    rho_k_h_v_macro = Column(Float)
    rho_ca_h_ti_h = Column(Float)
    rho_ca_h_v_h = Column(Float)
    rho_ca_h_cr_h = Column(Float)
    rho_ca_h_mn_h = Column(Float)
    rho_ca_h_fe_h = Column(Float)
    rho_ca_h_co_h = Column(Float)
    rho_ca_h_ni_h = Column(Float)
    rho_ca_h_cu_h = Column(Float)
    rho_ca_h_ge_h = Column(Float)
    rho_ca_h_c12_c13 = Column(Float)
    rho_ca_h_v_macro = Column(Float)
    rho_ti_h_v_h = Column(Float)
    rho_ti_h_cr_h = Column(Float)
    rho_ti_h_mn_h = Column(Float)
    rho_ti_h_fe_h = Column(Float)
    rho_ti_h_co_h = Column(Float)
    rho_ti_h_ni_h = Column(Float)
    rho_ti_h_cu_h = Column(Float)
    rho_ti_h_ge_h = Column(Float)
    rho_ti_h_c12_c13 = Column(Float)
    rho_ti_h_v_macro = Column(Float)
    rho_v_h_cr_h = Column(Float)
    rho_v_h_mn_h = Column(Float)
    rho_v_h_fe_h = Column(Float)
    rho_v_h_co_h = Column(Float)
    rho_v_h_ni_h = Column(Float)
    rho_v_h_cu_h = Column(Float)
    rho_v_h_ge_h = Column(Float)
    rho_v_h_c12_c13 = Column(Float)
    rho_v_h_v_macro = Column(Float)
    rho_cr_h_mn_h = Column(Float)
    rho_cr_h_fe_h = Column(Float)
    rho_cr_h_co_h = Column(Float)
    rho_cr_h_ni_h = Column(Float)
    rho_cr_h_cu_h = Column(Float)
    rho_cr_h_ge_h = Column(Float)
    rho_cr_h_c12_c13 = Column(Float)
    rho_cr_h_v_macro = Column(Float)
    rho_mn_h_fe_h = Column(Float)
    rho_mn_h_co_h = Column(Float)
    rho_mn_h_ni_h = Column(Float)
    rho_mn_h_cu_h = Column(Float)
    rho_mn_h_ge_h = Column(Float)
    rho_mn_h_c12_c13 = Column(Float)
    rho_mn_h_v_macro = Column(Float)
    rho_fe_h_co_h = Column(Float)
    rho_fe_h_ni_h = Column(Float)
    rho_fe_h_cu_h = Column(Float)
    rho_fe_h_ge_h = Column(Float)
    rho_fe_h_c12_c13 = Column(Float)
    rho_fe_h_v_macro = Column(Float)
    rho_co_h_ni_h = Column(Float)
    rho_co_h_cu_h = Column(Float)
    rho_co_h_ge_h = Column(Float)
    rho_co_h_c12_c13 = Column(Float)
    rho_co_h_v_macro = Column(Float)
    rho_ni_h_cu_h = Column(Float)
    rho_ni_h_ge_h = Column(Float)
    rho_ni_h_c12_c13 = Column(Float)
    rho_ni_h_v_macro = Column(Float)
    rho_cu_h_ge_h = Column(Float)
    rho_cu_h_c12_c13 = Column(Float)
    rho_cu_h_v_macro = Column(Float)
    rho_ge_h_c12_c13 = Column(Float)
    rho_ge_h_v_macro = Column(Float)
    rho_c12_c13_v_macro = Column(Float)
    raw_e_teff = Column(Float(53))
    raw_e_logg = Column(Float(53))
    raw_e_v_turb = Column(Float(53))
    raw_e_c_h = Column(Float(53))
    raw_e_n_h = Column(Float(53))
    raw_e_o_h = Column(Float(53))
    raw_e_na_h = Column(Float(53))
    raw_e_mg_h = Column(Float(53))
    raw_e_al_h = Column(Float(53))
    raw_e_si_h = Column(Float(53))
    raw_e_p_h = Column(Float(53))
    raw_e_s_h = Column(Float(53))
    raw_e_k_h = Column(Float(53))
    raw_e_ca_h = Column(Float(53))
    raw_e_ti_h = Column(Float(53))
    raw_e_v_h = Column(Float(53))
    raw_e_cr_h = Column(Float(53))
    raw_e_mn_h = Column(Float(53))
    raw_e_fe_h = Column(Float(53))
    raw_e_co_h = Column(Float(53))
    raw_e_ni_h = Column(Float(53))
    raw_e_cu_h = Column(Float(53))
    raw_e_ge_h = Column(Float(53))
    raw_e_c12_c13 = Column(Float(53))
    raw_e_v_macro = Column(Float(53))

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class ApogeeMadgicsVisitSpectrum(Base):
    __tablename__ = 'apogee_madgics_visit_spectrum'
    __table_args__ = (
        Index('apogee_madgics_visit_spectrum_release_telescope_field_pl_3976b0', 'release', 'telescope', 'field', 'plate', 'mjd', 'fiber', unique=True),
    )

    pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.apogee_madgics_visit_spectrum_pk_seq'::regclass)"))
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), unique=True)
    drp_spectrum_pk_id = Column(ForeignKey('astra_050.apogee_visit_spectrum.spectrum_pk_id'), nullable=False, unique=True)
    source_pk = Column(ForeignKey('astra_050.source.pk'), index=True)
    release = Column(Text, nullable=False)
    telescope = Column(Text, nullable=False)
    field = Column(Text, nullable=False)
    plate = Column(Integer, nullable=False)
    mjd = Column(Integer, nullable=False)
    fiber = Column(Integer, nullable=False)

    drp_spectrum_pk = relationship('ApogeeVisitSpectrum')
    source = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class ApogeeVisitSpectrumInApStar(Base):
    __tablename__ = 'apogee_visit_spectrum_in_ap_star'
    __table_args__ = (
        Index('apogee_visit_spectrum_in_ap_star_release_apred_apstar_ob_3b116a', 'release', 'apred', 'apstar', 'obj', 'telescope', 'healpix', 'field', 'prefix', 'plate', 'mjd', 'fiber', unique=True),
    )

    pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.apogee_visit_spectrum_in_ap_star_pk_seq'::regclass)"))
    source_pk = Column(ForeignKey('astra_050.source.pk'), index=True)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False, unique=True)
    drp_spectrum_pk_id = Column(ForeignKey('astra_050.apogee_visit_spectrum.spectrum_pk_id'), nullable=False, unique=True)
    release = Column(Text, nullable=False)
    filetype = Column(Text, nullable=False)
    apred = Column(Text, nullable=False)
    apstar = Column(Text, nullable=False)
    obj = Column(Text, nullable=False)
    telescope = Column(Text, nullable=False)
    healpix = Column(Integer)
    field = Column(Text)
    prefix = Column(Text)
    plate = Column(Text, nullable=False)
    mjd = Column(Integer, nullable=False)
    fiber = Column(Integer, nullable=False)
    reduction = Column(Text)

    drp_spectrum_pk = relationship('ApogeeVisitSpectrum')
    source = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class BossRestFrameVisitSpectrum(Base):
    __tablename__ = 'boss_rest_frame_visit_spectrum'
    __table_args__ = (
        Index('boss_rest_frame_visit_spectrum_v_astra_filetype_release__3bdd22', 'v_astra', 'filetype', 'release', 'run2d', 'fieldid', 'mjd', 'catalogid', unique=True),
    )

    pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.boss_rest_frame_visit_spectrum_pk_seq'::regclass)"))
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), unique=True)
    source_pk = Column(ForeignKey('astra_050.source.pk'), index=True)
    drp_spectrum_pk_id = Column(ForeignKey('astra_050.boss_visit_spectrum.spectrum_pk_id'), nullable=False, unique=True)
    release = Column(Text, nullable=False, index=True)
    filetype = Column(Text, nullable=False)
    v_astra = Column(Text, nullable=False)
    healpix = Column(Integer)
    sdss_id = Column(BigInteger, nullable=False, index=True)
    run2d = Column(Text, nullable=False)
    mjd = Column(Integer, nullable=False)
    fieldid = Column(Integer, nullable=False)
    catalogid = Column(BigInteger, nullable=False)
    n_exp = Column(Integer)
    exptime = Column(Float)
    plateid = Column(Integer)
    cartid = Column(Integer)
    mapid = Column(Integer)
    slitid = Column(Integer)
    psfsky = Column(Integer)
    preject = Column(Float)
    n_std = Column(Integer)
    n_gal = Column(Integer)
    lowrej = Column(Integer)
    highrej = Column(Integer)
    scatpoly = Column(Integer)
    proftype = Column(Integer)
    nfitpoly = Column(Integer)
    skychi2 = Column(Float)
    schi2min = Column(Float)
    schi2max = Column(Float)
    alt = Column(Float)
    az = Column(Float)
    telescope = Column(Text)
    seeing = Column(Float)
    airmass = Column(Float)
    airtemp = Column(Float)
    dewpoint = Column(Float)
    humidity = Column(Float)
    pressure = Column(Float)
    dust_a = Column(Float)
    dust_b = Column(Float)
    gust_direction = Column(Float)
    gust_speed = Column(Float)
    wind_direction = Column(Float)
    wind_speed = Column(Float)
    moon_dist_mean = Column(Float)
    moon_phase_mean = Column(Float)
    n_guide = Column(Integer)
    tai_beg = Column(BigInteger)
    tai_end = Column(BigInteger)
    fiber_offset = Column(Boolean)
    f_night_time = Column(Float)
    delta_ra = Column(ARRAY(Float()), index=True)
    delta_dec = Column(ARRAY(Float()), index=True)
    snr = Column(Float)
    in_stack = Column(Boolean, nullable=False)
    gri_gaia_transform_flags = Column(BigInteger, nullable=False)
    zwarning_flags = Column(BigInteger, nullable=False)
    xcsao_v_rad = Column(Float)
    xcsao_e_v_rad = Column(Float)
    xcsao_teff = Column(Float)
    xcsao_e_teff = Column(Float)
    xcsao_logg = Column(Float)
    xcsao_e_logg = Column(Float)
    xcsao_fe_h = Column(Float)
    xcsao_e_fe_h = Column(Float)
    xcsao_rxc = Column(Float)
    nmf_rchi2 = Column(Float)
    nmf_flags = Column(BigInteger, nullable=False)

    drp_spectrum_pk = relationship('BossVisitSpectrum')
    source = relationship('Source')
    spectrum_pk = relationship('Spectrum')


class FerreStellarParameters(Base):
    __tablename__ = 'ferre_stellar_parameters'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.ferre_stellar_parameters_task_pk_seq'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'), nullable=False, index=True)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False, index=True)
    upstream_pk = Column(ForeignKey('astra_050.ferre_coarse.task_pk'), nullable=False, index=True)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False, index=True)
    pwd = Column(Text, nullable=False)
    short_grid_name = Column(Text, nullable=False)
    header_path = Column(Text, nullable=False)
    initial_teff = Column(Float)
    initial_logg = Column(Float)
    initial_m_h = Column(Float)
    initial_log10_v_sini = Column(Float)
    initial_log10_v_micro = Column(Float)
    initial_alpha_m = Column(Float)
    initial_c_m = Column(Float)
    initial_n_m = Column(Float)
    initial_flags = Column(BigInteger, nullable=False)
    continuum_order = Column(Integer, nullable=False)
    continuum_reject = Column(Float)
    continuum_flag = Column(Integer)
    continuum_observations_flag = Column(Integer)
    interpolation_order = Column(Integer, nullable=False)
    weight_path = Column(Text, nullable=False)
    frozen_flags = Column(BigInteger, nullable=False)
    f_access = Column(Integer, nullable=False)
    f_format = Column(Integer, nullable=False)
    n_threads = Column(Integer, nullable=False)
    teff = Column(Float)
    e_teff = Column(Float)
    logg = Column(Float)
    e_logg = Column(Float)
    m_h = Column(Float)
    e_m_h = Column(Float)
    log10_v_sini = Column(Float)
    e_log10_v_sini = Column(Float)
    log10_v_micro = Column(Float)
    e_log10_v_micro = Column(Float)
    alpha_m = Column(Float)
    e_alpha_m = Column(Float)
    c_m = Column(Float)
    e_c_m = Column(Float)
    n_m = Column(Float)
    e_n_m = Column(Float)
    ferre_name = Column(Text, nullable=False)
    ferre_input_index = Column(Integer, nullable=False)
    ferre_output_index = Column(Integer, nullable=False)
    ferre_n_obj = Column(Integer, nullable=False)
    snr = Column(Float)
    rchi2 = Column(Float)
    penalized_rchi2 = Column(Float)
    ferre_log_snr_sq = Column(Float)
    ferre_time_load_grid = Column(Float)
    ferre_time_elapsed = Column(Float)
    ferre_flags = Column(BigInteger, nullable=False)

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')
    ferre_coarse = relationship('FerreCoarse')


class FerreChemicalAbundances(Base):
    __tablename__ = 'ferre_chemical_abundances'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.ferre_chemical_abundances_task_pk_seq1'::regclass)"))
    source_pk_id = Column(ForeignKey('astra_050.source.pk'), nullable=False)
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False)
    upstream_pk = Column(ForeignKey('astra_050.ferre_stellar_parameters.task_pk'), nullable=False)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False)
    pwd = Column(Text, nullable=False)
    short_grid_name = Column(Text, nullable=False)
    header_path = Column(Text, nullable=False)
    initial_teff = Column(Float)
    initial_logg = Column(Float)
    initial_m_h = Column(Float)
    initial_log10_v_sini = Column(Float)
    initial_log10_v_micro = Column(Float)
    initial_alpha_m = Column(Float)
    initial_c_m = Column(Float)
    initial_n_m = Column(Float)
    initial_flags = Column(BigInteger, nullable=False)
    continuum_order = Column(Integer, nullable=False)
    continuum_reject = Column(Float)
    continuum_flag = Column(Integer)
    continuum_observations_flag = Column(Integer)
    interpolation_order = Column(Integer, nullable=False)
    weight_path = Column(Text, nullable=False)
    frozen_flags = Column(BigInteger, nullable=False)
    f_access = Column(Integer, nullable=False)
    f_format = Column(Integer, nullable=False)
    n_threads = Column(Integer, nullable=False)
    teff = Column(Float)
    e_teff = Column(Float)
    logg = Column(Float)
    e_logg = Column(Float)
    m_h = Column(Float)
    e_m_h = Column(Float)
    log10_v_sini = Column(Float)
    e_log10_v_sini = Column(Float)
    log10_v_micro = Column(Float)
    e_log10_v_micro = Column(Float)
    alpha_m = Column(Float)
    e_alpha_m = Column(Float)
    c_m = Column(Float)
    e_c_m = Column(Float)
    n_m = Column(Float)
    e_n_m = Column(Float)
    ferre_name = Column(Text, nullable=False)
    ferre_input_index = Column(Integer, nullable=False)
    ferre_output_index = Column(Integer, nullable=False)
    ferre_n_obj = Column(Integer, nullable=False)
    snr = Column(Float)
    rchi2 = Column(Float)
    penalized_rchi2 = Column(Float)
    ferre_log_snr_sq = Column(Float)
    ferre_time_load_grid = Column(Float)
    ferre_time_elapsed = Column(Float)
    ferre_flags = Column(BigInteger, nullable=False)

    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')
    ferre_stellar_parameter = relationship('FerreStellarParameter')


class Aspcap(Base):
    __tablename__ = 'aspcap'

    task_pk = Column(Integer, primary_key=True, server_default=text("nextval('astra_050.aspcap_task_pk_seq2'::regclass)"))
    spectrum_pk_id = Column(ForeignKey('astra_050.spectrum.pk'), nullable=False)
    source_pk_id = Column(ForeignKey('astra_050.source.pk'), nullable=False)
    v_astra = Column(Text, nullable=False)
    created = Column(DateTime, nullable=False)
    t_elapsed = Column(Float)
    t_overhead = Column(Float)
    tag = Column(Text, nullable=False)
    irfm_teff = Column(Float)
    irfm_teff_flags = Column(BigInteger, nullable=False)
    teff = Column(Float)
    e_teff = Column(Float)
    logg = Column(Float)
    e_logg = Column(Float)
    v_micro = Column(Float)
    e_v_micro = Column(Float)
    v_sini = Column(Float)
    e_v_sini = Column(Float)
    m_h_atm = Column(Float)
    e_m_h_atm = Column(Float)
    alpha_m_atm = Column(Float)
    e_alpha_m_atm = Column(Float)
    c_m_atm = Column(Float)
    e_c_m_atm = Column(Float)
    n_m_atm = Column(Float)
    e_n_m_atm = Column(Float)
    al_h = Column(Float)
    e_al_h = Column(Float)
    al_h_flags = Column(BigInteger, nullable=False)
    al_h_rchi2 = Column(Float)
    c_12_13 = Column(Float)
    e_c_12_13 = Column(Float)
    c_12_13_flags = Column(BigInteger, nullable=False)
    c_12_13_rchi2 = Column(Float)
    ca_h = Column(Float)
    e_ca_h = Column(Float)
    ca_h_flags = Column(BigInteger, nullable=False)
    ca_h_rchi2 = Column(Float)
    ce_h = Column(Float)
    e_ce_h = Column(Float)
    ce_h_flags = Column(BigInteger, nullable=False)
    ce_h_rchi2 = Column(Float)
    c_1_h = Column(Float)
    e_c_1_h = Column(Float)
    c_1_h_flags = Column(BigInteger, nullable=False)
    c_1_h_rchi2 = Column(Float)
    c_h = Column(Float)
    e_c_h = Column(Float)
    c_h_flags = Column(BigInteger, nullable=False)
    c_h_rchi2 = Column(Float)
    co_h = Column(Float)
    e_co_h = Column(Float)
    co_h_flags = Column(BigInteger, nullable=False)
    co_h_rchi2 = Column(Float)
    cr_h = Column(Float)
    e_cr_h = Column(Float)
    cr_h_flags = Column(BigInteger, nullable=False)
    cr_h_rchi2 = Column(Float)
    cu_h = Column(Float)
    e_cu_h = Column(Float)
    cu_h_flags = Column(BigInteger, nullable=False)
    cu_h_rchi2 = Column(Float)
    fe_h = Column(Float)
    e_fe_h = Column(Float)
    fe_h_flags = Column(BigInteger, nullable=False)
    fe_h_rchi2 = Column(Float)
    k_h = Column(Float)
    e_k_h = Column(Float)
    k_h_flags = Column(BigInteger, nullable=False)
    k_h_rchi2 = Column(Float)
    mg_h = Column(Float)
    e_mg_h = Column(Float)
    mg_h_flags = Column(BigInteger, nullable=False)
    mg_h_rchi2 = Column(Float)
    mn_h = Column(Float)
    e_mn_h = Column(Float)
    mn_h_flags = Column(BigInteger, nullable=False)
    mn_h_rchi2 = Column(Float)
    na_h = Column(Float)
    e_na_h = Column(Float)
    na_h_flags = Column(BigInteger, nullable=False)
    na_h_rchi2 = Column(Float)
    nd_h = Column(Float)
    e_nd_h = Column(Float)
    nd_h_flags = Column(BigInteger, nullable=False)
    nd_h_rchi2 = Column(Float)
    ni_h = Column(Float)
    e_ni_h = Column(Float)
    ni_h_flags = Column(BigInteger, nullable=False)
    ni_h_rchi2 = Column(Float)
    n_h = Column(Float)
    e_n_h = Column(Float)
    n_h_flags = Column(BigInteger, nullable=False)
    n_h_rchi2 = Column(Float)
    o_h = Column(Float)
    e_o_h = Column(Float)
    o_h_flags = Column(BigInteger, nullable=False)
    o_h_rchi2 = Column(Float)
    p_h = Column(Float)
    e_p_h = Column(Float)
    p_h_flags = Column(BigInteger, nullable=False)
    p_h_rchi2 = Column(Float)
    si_h = Column(Float)
    e_si_h = Column(Float)
    si_h_flags = Column(BigInteger, nullable=False)
    si_h_rchi2 = Column(Float)
    s_h = Column(Float)
    e_s_h = Column(Float)
    s_h_flags = Column(BigInteger, nullable=False)
    s_h_rchi2 = Column(Float)
    ti_h = Column(Float)
    e_ti_h = Column(Float)
    ti_h_flags = Column(BigInteger, nullable=False)
    ti_h_rchi2 = Column(Float)
    ti_2_h = Column(Float)
    e_ti_2_h = Column(Float)
    ti_2_h_flags = Column(BigInteger, nullable=False)
    ti_2_h_rchi2 = Column(Float)
    v_h = Column(Float)
    e_v_h = Column(Float)
    v_h_flags = Column(BigInteger, nullable=False)
    v_h_rchi2 = Column(Float)
    short_grid_name = Column(Text, nullable=False)
    continuum_order = Column(Integer, nullable=False)
    continuum_reject = Column(Float)
    interpolation_order = Column(Integer, nullable=False)
    initial_flags = Column(BigInteger, nullable=False)
    snr = Column(Float)
    rchi2 = Column(Float)
    ferre_log_snr_sq = Column(Float)
    ferre_time_elapsed = Column(Float)
    result_flags = Column(BigInteger, nullable=False)
    stellar_parameters_task_pk_id = Column(ForeignKey('astra_050.ferre_stellar_parameters.task_pk'))
    al_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    c_12_13_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    ca_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    ce_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    c_1_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    c_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    co_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    cr_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    cu_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    fe_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    k_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    mg_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    mn_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    na_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    nd_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    ni_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    n_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    o_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    p_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    si_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    s_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    ti_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    ti_2_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    v_h_task_pk_id = Column(ForeignKey('astra_050.ferre_chemical_abundances.task_pk'))
    calibrated_flags = Column(BigInteger)
    mass = Column(Float)
    radius = Column(Float)
    raw_teff = Column(Float)
    raw_e_teff = Column(Float)
    raw_logg = Column(Float)
    raw_e_logg = Column(Float)
    raw_v_micro = Column(Float)
    raw_e_v_micro = Column(Float)
    raw_v_sini = Column(Float)
    raw_e_v_sini = Column(Float)
    raw_m_h_atm = Column(Float)
    raw_e_m_h_atm = Column(Float)
    raw_alpha_m_atm = Column(Float)
    raw_e_alpha_m_atm = Column(Float)
    raw_c_m_atm = Column(Float)
    raw_e_c_m_atm = Column(Float)
    raw_n_m_atm = Column(Float)
    raw_e_n_m_atm = Column(Float)
    raw_al_h = Column(Float)
    raw_e_al_h = Column(Float)
    raw_c_12_13 = Column(Float)
    raw_e_c_12_13 = Column(Float)
    raw_ca_h = Column(Float)
    raw_e_ca_h = Column(Float)
    raw_ce_h = Column(Float)
    raw_e_ce_h = Column(Float)
    raw_c_1_h = Column(Float)
    raw_e_c_1_h = Column(Float)
    raw_c_h = Column(Float)
    raw_e_c_h = Column(Float)
    raw_co_h = Column(Float)
    raw_e_co_h = Column(Float)
    raw_cr_h = Column(Float)
    raw_e_cr_h = Column(Float)
    raw_cu_h = Column(Float)
    raw_e_cu_h = Column(Float)
    raw_fe_h = Column(Float)
    raw_e_fe_h = Column(Float)
    raw_k_h = Column(Float)
    raw_e_k_h = Column(Float)
    raw_mg_h = Column(Float)
    raw_e_mg_h = Column(Float)
    raw_mn_h = Column(Float)
    raw_e_mn_h = Column(Float)
    raw_na_h = Column(Float)
    raw_e_na_h = Column(Float)
    raw_nd_h = Column(Float)
    raw_e_nd_h = Column(Float)
    raw_ni_h = Column(Float)
    raw_e_ni_h = Column(Float)
    raw_n_h = Column(Float)
    raw_e_n_h = Column(Float)
    raw_o_h = Column(Float)
    raw_e_o_h = Column(Float)
    raw_p_h = Column(Float)
    raw_e_p_h = Column(Float)
    raw_si_h = Column(Float)
    raw_e_si_h = Column(Float)
    raw_s_h = Column(Float)
    raw_e_s_h = Column(Float)
    raw_ti_h = Column(Float)
    raw_e_ti_h = Column(Float)
    raw_ti_2_h = Column(Float)
    raw_e_ti_2_h = Column(Float)
    raw_v_h = Column(Float)
    raw_e_v_h = Column(Float)

    al_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.al_h_task_pk_id == FerreChemicalAbundance.task_pk')
    c_12_13_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.c_12_13_task_pk_id == FerreChemicalAbundance.task_pk')
    c_1_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.c_1_h_task_pk_id == FerreChemicalAbundance.task_pk')
    c_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.c_h_task_pk_id == FerreChemicalAbundance.task_pk')
    ca_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.ca_h_task_pk_id == FerreChemicalAbundance.task_pk')
    ce_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.ce_h_task_pk_id == FerreChemicalAbundance.task_pk')
    co_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.co_h_task_pk_id == FerreChemicalAbundance.task_pk')
    cr_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.cr_h_task_pk_id == FerreChemicalAbundance.task_pk')
    cu_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.cu_h_task_pk_id == FerreChemicalAbundance.task_pk')
    fe_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.fe_h_task_pk_id == FerreChemicalAbundance.task_pk')
    k_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.k_h_task_pk_id == FerreChemicalAbundance.task_pk')
    mg_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.mg_h_task_pk_id == FerreChemicalAbundance.task_pk')
    mn_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.mn_h_task_pk_id == FerreChemicalAbundance.task_pk')
    n_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.n_h_task_pk_id == FerreChemicalAbundance.task_pk')
    na_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.na_h_task_pk_id == FerreChemicalAbundance.task_pk')
    nd_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.nd_h_task_pk_id == FerreChemicalAbundance.task_pk')
    ni_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.ni_h_task_pk_id == FerreChemicalAbundance.task_pk')
    o_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.o_h_task_pk_id == FerreChemicalAbundance.task_pk')
    p_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.p_h_task_pk_id == FerreChemicalAbundance.task_pk')
    s_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.s_h_task_pk_id == FerreChemicalAbundance.task_pk')
    si_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.si_h_task_pk_id == FerreChemicalAbundance.task_pk')
    source_pk = relationship('Source')
    spectrum_pk = relationship('Spectrum')
    stellar_parameters_task_pk = relationship('FerreStellarParameter')
    ti_2_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.ti_2_h_task_pk_id == FerreChemicalAbundance.task_pk')
    ti_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.ti_h_task_pk_id == FerreChemicalAbundance.task_pk')
    v_h_task_pk = relationship('FerreChemicalAbundance', primaryjoin='Aspcap.v_h_task_pk_id == FerreChemicalAbundance.task_pk')


# prepare the base
database.add_base(Base)
