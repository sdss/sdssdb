# !usr/bin/env python
# -*- coding: utf-8 -*-
#

# this file was autogenerated with sqlacodegen and then adapted for sdssdb
# flake8: noqa=E501

import os

from sqlalchemy import (ARRAY, BigInteger, Boolean, Column, DateTime, Float,
                        ForeignKey, Integer, SmallInteger, Text, text)
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import AbstractConcreteBase, declared_attr

from sdssdb.sqlalchemy.sdss5db import SDSS5dbBase, database


class Base(AbstractConcreteBase, SDSS5dbBase):
    __abstract__ = True
    _schema = 'opsdb_apo' if os.getenv("OBSERVATORY") == 'APO' else 'opsdb_lco'
    _relations = 'define_relations'

    @declared_attr
    def __table_args__(cls):
        return {'schema': cls._schema}


class BasePriority(Base):
    __tablename__ = 'base_priority'

    pk = Column(Integer, primary_key=True, server_default=text(f"nextval('{Base._schema}.base_priority_pk_seq'::regclass)"))
    field_pk = Column(Integer)
    priority = Column(Integer)
    version_pk = Column(Integer)


class CompletionStatus(Base):
    __tablename__ = 'completion_status'

    pk = Column(Integer, primary_key=True, server_default=text(f"nextval('{Base._schema}.completion_status_pk_seq'::regclass)"))
    label = Column(Text)


class ExposureFlavor(Base):
    __tablename__ = 'exposure_flavor'

    pk = Column(Integer, primary_key=True, server_default=text(f"nextval('{Base._schema}.exposure_flavor_pk_seq'::regclass)"))
    label = Column(Text)


class FieldPriority(Base):
    __tablename__ = 'field_priority'

    pk = Column(Integer, primary_key=True, server_default=text(f"nextval('{Base._schema}.field_priority_pk_seq'::regclass)"))
    label = Column(Text)


class PriorityVersion(Base):
    __tablename__ = 'priority_version'

    pk = Column(Integer, primary_key=True, server_default=text(f"nextval('{Base._schema}.priority_version_pk_seq'::regclass)"))
    label = Column(Text)


class Survey(Base):
    __tablename__ = 'survey'

    pk = Column(Integer, primary_key=True, server_default=text(f"nextval('{Base._schema}.survey_pk_seq'::regclass)"))
    label = Column(Text)


class Camera(Base):
    __tablename__ = 'camera'

    pk = Column(Integer, primary_key=True, server_default=text(f"nextval('{Base._schema}.camera_pk_seq'::regclass)"))
    instrument_pk = Column(ForeignKey('targetdb.instrument.pk'))
    label = Column(Text)

    instrument = relationship('Instrument')


class FieldToPriority(Base):
    __tablename__ = 'field_to_priority'

    pk = Column(Integer, primary_key=True, server_default=text(f"nextval('{Base._schema}.field_to_priority_pk_seq'::regclass)"))
    field_pk = Column(Integer)
    field_priority_pk = Column(ForeignKey(f'{Base._schema}.field_priority.pk', ondelete='CASCADE', onupdate='CASCADE', deferrable=True, initially='DEFERRED'))

    field_priority = relationship('FieldPriority')


class Configuration(Base):
    __tablename__ = 'configuration'

    configuration_id = Column(Integer, primary_key=True, server_default=text(f"nextval('{Base._schema}.configuration_configuration_id_seq'::regclass)"))
    design_id = Column(ForeignKey('targetdb.design.design_id'), index=True)
    comment = Column(Text)
    temperature = Column(Text)
    epoch = Column(Float(53))
    calibration_version = Column(Text)

    design = relationship('Design')


class DesignToStatus(Base):
    __tablename__ = 'design_to_status'

    pk = Column(Integer, primary_key=True, server_default=text(f"nextval('{Base._schema}.design_to_status_pk_seq'::regclass)"))
    design_id = Column(ForeignKey('targetdb.design.design_id', onupdate='CASCADE', deferrable=True, initially='DEFERRED'), unique=True)
    completion_status_pk = Column(ForeignKey(f'{Base._schema}.completion_status.pk', ondelete='CASCADE', onupdate='CASCADE', deferrable=True, initially='DEFERRED'))
    mjd = Column(Float)
    manual = Column(Boolean, server_default=text("false"))

    completion_statu = relationship('CompletionStatus')
    design = relationship('Design', uselist=False)


class Queue(Base):
    __tablename__ = 'queue'

    pk = Column(Integer, primary_key=True, server_default=text(f"nextval('{Base._schema}.queue_pk_seq'::regclass)"))
    design_id = Column(ForeignKey('targetdb.design.design_id'))
    position = Column(SmallInteger)
    mjd_plan = Column(Float(53))

    design = relationship('Design')


class AssignmentToFocal(Base):
    __tablename__ = 'assignment_to_focal'

    pk = Column(Integer, primary_key=True, server_default=text(f"nextval('{Base._schema}.assignment_to_focal_pk_seq'::regclass)"))
    assignment_pk = Column(Integer, index=True)
    configuration_id = Column(ForeignKey(f'{Base._schema}.configuration.configuration_id', ondelete='CASCADE', onupdate='CASCADE', deferrable=True, initially='DEFERRED'))
    xfocal = Column(Float)
    yfocal = Column(Float)
    positioner_id = Column(SmallInteger)

    configuration = relationship('Configuration')


class Exposure(Base):
    __tablename__ = 'exposure'

    pk = Column(Integer, primary_key=True, server_default=text(f"nextval('{Base._schema}.exposure_pk_seq'::regclass)"))
    configuration_id = Column(ForeignKey(f'{Base._schema}.configuration.configuration_id'), index=True)
    survey_pk = Column(ForeignKey(f'{Base._schema}.survey.pk'))
    exposure_no = Column(BigInteger)
    comment = Column(Text)
    start_time = Column(DateTime, index=True)
    exposure_time = Column(Float)
    exposure_flavor_pk = Column(ForeignKey(f'{Base._schema}.exposure_flavor.pk'), nullable=False)

    configuration = relationship('Configuration')
    exposure_flavor = relationship('ExposureFlavor')
    survey = relationship('Survey')


class CameraFrame(Base):
    __tablename__ = 'camera_frame'

    pk = Column(Integer, primary_key=True, server_default=text(f"nextval('{Base._schema}.camera_frame_pk_seq'::regclass)"))
    exposure_pk = Column(ForeignKey(f'{Base._schema}.exposure.pk', ondelete='CASCADE', onupdate='CASCADE', deferrable=True, initially='DEFERRED'), nullable=False, index=True)
    camera_pk = Column(ForeignKey(f'{Base._schema}.camera.pk'), nullable=False)
    ql_sn2 = Column(Float)
    sn2 = Column(Float)
    comment = Column(Text)

    camera = relationship('Camera')
    exposure = relationship('Exposure')


class Quicklook(Base):
    __tablename__ = 'quicklook'

    pk = Column(Integer, primary_key=True, server_default=text(f"nextval('{Base._schema}.quicklook_pk_seq'::regclass)"))
    snr_standard = Column(Float)
    logsnr_hmag_coef = Column(ARRAY(Float()))
    exposure_pk = Column(ForeignKey(f'{Base._schema}.exposure.pk', ondelete='CASCADE', onupdate='CASCADE', deferrable=True, initially='DEFERRED'), index=True)
    readnum = Column(Integer)
    exptype = Column(Text)
    hmag_standard = Column(Float)
    snr_standard_scale = Column(Float)
    snr_predict = Column(Float)
    logsnr_hmag_coef_all = Column(ARRAY(Float()))
    zeropt = Column(Float)

    exposure = relationship('Exposure')


class Quickred(Base):
    __tablename__ = 'quickred'

    pk = Column(Integer, primary_key=True, server_default=text(f"nextval('{Base._schema}.quickred_pk_seq'::regclass)"))
    exposure_pk = Column(ForeignKey(f'{Base._schema}.exposure.pk', ondelete='CASCADE', onupdate='CASCADE', deferrable=True, initially='DEFERRED'), index=True)
    snr_standard = Column(Float)
    logsnr_hmag_coef = Column(ARRAY(Float()))
    dither_pixpos = Column(Float)
    snr_source = Column(Text)
    hmag_standard = Column(Float)
    snr_standard_scale = Column(Float)
    logsnr_hmag_coef_all = Column(ARRAY(Float()))
    zeropt = Column(Float)
    dither_named = Column(Text)

    exposure = relationship('Exposure')


def define_relations():
    """ leaving this empty as relations were autogenerated """
    pass


# prepare the base
database.add_base(Base)
