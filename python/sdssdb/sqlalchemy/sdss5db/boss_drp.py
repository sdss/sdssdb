# !usr/bin/env python
# -*- coding: utf-8 -*-
#

# this file was autogenerated with sqlacodegen and then adapted for sdssdb
# flake8: noqa=E501,E741

from sqlalchemy import (ARRAY, BigInteger, Boolean, Column, DateTime, Float, ForeignKey,
                        Integer, LargeBinary, SmallInteger, String, text)
from sqlalchemy.ext.declarative import AbstractConcreteBase, declared_attr
from sqlalchemy.orm import relationship

from sdssdb.sqlalchemy.sdss5db import SDSS5dbBase, database


SCHEMA = 'boss_drp'


class Base(AbstractConcreteBase, SDSS5dbBase):
    __abstract__ = True
    _schema = SCHEMA
    _relations = 'define_relations'

    @declared_attr
    def __table_args__(cls):
        return {'schema': cls._schema}


class BossVersion(Base):
    __tablename__ = 'boss_version'

    id = Column(Integer, primary_key=True, server_default=text("nextval('boss_drp.boss_version_id_seq'::regclass)"))
    ipl = Column(SmallInteger)
    run2d = Column(String)
    run1d = Column(String)
    is_default = Column(Boolean)
    is_epoch = Column(Boolean)
    is_custom = Column(Boolean)
    custom_name = Column(String)
    created = Column(DateTime(True))
    modified = Column(DateTime(True), server_default=text("now()"))


class BossField(Base):
    __tablename__ = 'boss_field'

    id = Column(Integer, primary_key=True, server_default=text("nextval('boss_drp.boss_field_id_seq'::regclass)"))
    boss_version_id = Column(ForeignKey('boss_drp.boss_version.id'), nullable=False)
    field = Column(Integer)
    designs = Column(String)
    configs = Column(String)
    mjd = Column(Integer)
    observatory = Column(String)
    run2d = Column(String)
    run1d = Column(String)
    racen = Column(Float)
    deccen = Column(Float)
    epoch = Column(Float)
    cartid = Column(String)
    tai = Column(Float(53))
    tai_beg = Column(Float(53))
    tai_end = Column(Float(53))
    airmass = Column(Float)
    exptime = Column(Float)
    mapname = Column(String)
    tileid = Column(Integer)
    designid = Column(Integer)
    survey = Column(String)
    programname = Column(String)
    chunk = Column(String)
    fieldquality = Column(String)
    fieldsn2 = Column(Float)
    deredsn2 = Column(Float)
    qsurvey = Column(Integer)
    mjdlist = Column(String)
    nexp = Column(Integer)
    nexp_b1 = Column(Integer)
    nexp_r1 = Column(Integer)
    nexp_b2 = Column(Integer)
    nexp_r2 = Column(Integer)
    expt_b1 = Column(Float)
    expt_r1 = Column(Float)
    expt_b2 = Column(Float)
    expt_r2 = Column(Float)
    sn2_g1 = Column(Float)
    sn2_r1 = Column(Float)
    sn2_i1 = Column(Float)
    sn2_g2 = Column(Float)
    sn2_r2 = Column(Float)
    sn2_i2 = Column(Float)
    goffstd = Column(Float)
    grmsstd = Column(Float)
    roffstd = Column(Float)
    rrmsstd = Column(Float)
    ioffstd = Column(Float)
    irmsstd = Column(Float)
    groffstd = Column(Float)
    grrmsstd = Column(Float)
    rioffstd = Column(Float)
    rirmsstd = Column(Float)
    goffgal = Column(Float)
    grmsgal = Column(Float)
    roffgal = Column(Float)
    rrmsgal = Column(Float)
    ioffgal = Column(Float)
    irmsgal = Column(Float)
    groffgal = Column(Float)
    grrmsgal = Column(Float)
    rioffgal = Column(Float)
    rirmsgal = Column(Float)
    nguide = Column(Integer)
    seeing20 = Column(Float)
    seeing50 = Column(Float)
    seeing80 = Column(Float)
    rmsoff20 = Column(Float)
    rmsoff50 = Column(Float)
    rmsoff80 = Column(Float)
    airtemp = Column(Float)
    xsigma = Column(Float)
    xsigmin = Column(Float)
    xsigmax = Column(Float)
    wsigma = Column(Float)
    wsigmin = Column(Float)
    wsigmax = Column(Float)
    xchi2 = Column(Float)
    xchi2min = Column(Float)
    xchi2max = Column(Float)
    skychi2 = Column(Float)
    schi2min = Column(Float)
    schi2max = Column(Float)
    fbadpix = Column(Float)
    fbadpix1 = Column(Float)
    fbadpix2 = Column(Float)
    n_total = Column(Integer)
    n_galaxy = Column(Integer)
    n_qso = Column(Integer)
    n_star = Column(Integer)
    n_unknown = Column(Integer)
    n_sky = Column(Integer)
    n_std = Column(Integer)
    n_target_qso = Column(Integer)
    n_target_main = Column(Integer)
    n_target_lrg1 = Column(Integer)
    n_target_lrg2 = Column(Integer)
    n_target_elg = Column(Integer)
    success_main = Column(Float)
    success_lrg1 = Column(Float)
    success_lrg2 = Column(Float)
    success_elg = Column(Float)
    success_qso = Column(Float)
    status2d = Column(String)
    statuscombine = Column(String)
    status1d = Column(String)
    public = Column(String)
    qualcomments = Column(String)
    moon_frac = Column(Float)
    field_cadence = Column(String)
    created = Column(DateTime(True))
    modified = Column(DateTime(True), server_default=text("now()"))

    boss_version = relationship('BossVersion')


class BossSpectrum(Base):
    __tablename__ = 'boss_spectrum'

    id = Column(Integer, primary_key=True, server_default=text("nextval('boss_drp.boss_spectrum_id_seq'::regclass)"))
    boss_version_id = Column(ForeignKey('boss_drp.boss_version.id'), nullable=False)
    field = Column(Integer)
    mjd = Column(Integer)
    mjd_final = Column(Float)
    obs = Column(String)
    run2d = Column(String)
    run1d = Column(String)
    nexp = Column(SmallInteger)
    exptime = Column(Float)
    target_index = Column(Integer)
    spec_file = Column(String)
    programname = Column(String)
    survey = Column(String)
    cadence = Column(String)
    firstcarton = Column(String)
    sdss5_target_flags = Column(LargeBinary)
    objtype = Column(String)
    catalogid = Column(BigInteger)
    sdss_id = Column(BigInteger)
    specobjid = Column(BigInteger)
    calibflux = Column(Array(Float()))
    calibflux_ivar = Column(Array(Float()))
    optical_prov = Column(String)
    mag = Column(ARRAY(Float()))
    psfmag = Column(ARRAY(Float()))
    fiber2mag = Column(ARRAY(Float()))
    catdb_mag = Column(ARRAY(Float()))
    gri_gaia_transform = Column(BigInteger)
    gaia_bp_mag = Column(Float)
    gaia_rp_mag = Column(Float)
    gaia_g_mag = Column(Float)
    gaia_id = Column(BigInteger)
    wise_mag = Column(ARRAY(Float()))
    twomass_mag = Column(ARRAY(Float()))
    guvcat_mag = Column(ARRAY(Float()))
    ebv = Column(Float)
    ebv_type = Column(String)
    fiber_ra = Column(Float(53))
    fiber_dec = Column(Float(53))
    plug_ra = Column(Float(53))
    plug_dec = Column(Float(53))
    racat = Column(Float(53))
    deccat = Column(Float(53))
    coord_epoch = Column(Float)
    delta_ra = Column(Float(53))
    delta_dec = Column(Float(53))
    pmra = Column(Float)
    pmdec = Column(Float)
    parallax = Column(Float)
    fiber_offset = Column(Integer)
    lambda_eff = Column(Float)
    healpix = Column(Integer)
    healpixgrp = Column(SmallInteger)
    healpix_dir = Column(String)
    fieldquality = Column(String)
    exp_disp_med = Column(Float(53))
    fieldsn2 = Column(Float)
    spec1_g = Column(Float)
    spec1_r = Column(Float)
    spec1_i = Column(Float)
    spec2_g = Column(Float)
    spec2_r = Column(Float)
    spec2_i = Column(Float)
    sn_median = Column(ARRAY(Float()))
    sn_median_all = Column(Float)
    airmass = Column(Float)
    seeing20 = Column(Float)
    seeing50 = Column(Float)
    seeing80 = Column(Float)
    moon_dist = Column(Float)
    moon_phase = Column(Float)
    assigned = Column(Boolean)
    on_target = Column(Boolean)
    valid = Column(Boolean)
    decollided = Column(Boolean)
    anyandmask = Column(Integer)
    anyormask = Column(Integer)
    specprimary = Column(SmallInteger)
    specboss = Column(SmallInteger)
    boss_specobj_id = Column(Integer)
    nspecobs = Column(SmallInteger)
    spectroflux = Column(ARRAY(Float()))
    spectroflux_ivar = Column(ARRAY(Float()))
    spectrosynflux = Column(ARRAY(Float()))
    spectrosynflux_ivar = Column(ARRAY(Float()))
    spectroskyflux = Column(ARRAY(Float()))
    wavemin = Column(Float)
    wavemax = Column(Float)
    wcoverage = Column(Float)
    objclass = Column(String)
    subclass = Column(String)
    z = Column(Float)
    z_err = Column(Float)
    zwarning = Column(Integer)
    rchi2 = Column(Float)
    dof = Column(Integer)
    rchi2diff = Column(Float)
    tfile = Column(String)
    vdisp = Column(Float)
    vdisp_err = Column(Float)
    vdispz = Column(Float)
    vdispz_err = Column(Float)
    vdispchi2 = Column(Float)
    vdispnpix = Column(Float)
    vdispdof = Column(Integer)
    chi68p = Column(Float)
    z_noqso = Column(Float)
    z_err_noqso = Column(Float)
    znum_noqso = Column(Integer)
    zwarning_noqso = Column(Integer)
    class_noqso = Column(String)
    subclass_noqso = Column(String)
    rchi2diff_noqso = Column(Float)
    xcsao_rv = Column(Float)
    xcsao_erv = Column(Float)
    xcsao_rxc = Column(Float)
    xcsao_teff = Column(Float)
    xcsao_eteff = Column(Float)
    xcsao_logg = Column(Float)
    xcsao_elogg = Column(Float)
    xcsao_feh = Column(Float)
    xcsao_efeh = Column(Float)
    created = Column(DateTime(True))
    modified = Column(DateTime(True), server_default=text("now()"))

    boss_version = relationship('BossVersion')


class BossSpectrumLine(Base):
    __tablename__ = 'boss_spectrum_line'

    id = Column(Integer, primary_key=True, server_default=text("nextval('boss_drp.boss_spectrum_line_id_seq'::regclass)"))
    boss_version_id = Column(ForeignKey('boss_drp.boss_version.id'), nullable=False)
    field = Column(Integer)
    mjd = Column(Integer)
    target_index = Column(Integer)
    catalogid = Column(BigInteger)
    sdss_id = Column(BigInteger)
    linename = Column(String)
    linewave = Column(Float(53))
    linez = Column(Float)
    linez_err = Column(Float)
    linesigma = Column(Float)
    linesigma_err = Column(Float)
    linearea = Column(Float)
    linearea_err = Column(Float)
    lineew = Column(Float)
    lineew_err = Column(Float)
    linecontlevel = Column(Float)
    linecontlevel_err = Column(Float)
    linenpixleft = Column(Integer)
    linenpixright = Column(Integer)
    linedof = Column(Float)
    linechi2 = Column(Float)
    created = Column(DateTime(True))
    modified = Column(DateTime(True), server_default=text("now()"))

    boss_version = relationship('BossVersion')


def define_relations():
    """ leaving this empty as relations were autogenerated """
    pass


# prepare the base
database.add_base(Base)
